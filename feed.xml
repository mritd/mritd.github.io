<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>漠然</title>
    <description>Nothing is impossible to a willing heart!</description>
    <link>https://mritd.me/</link>
    <atom:link href="https://mritd.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 28 Jun 2020 22:00:42 +0800</pubDate>
    <lastBuildDate>Sun, 28 Jun 2020 22:00:42 +0800</lastBuildDate>
    <generator>Jekyll v4.1.0</generator>
    
      <item>
        <title>树莓派4 Manjaro 系统定制</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;最近入手了新玩具 “吹灰派4”，这一代性能提升真的很大，所以买回来是真的没办法 “吃灰” 了；但是由于目前 64bit 系统比较难产，所以只能自己定义一下 Manjaro 了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一目前的系统现状&quot;&gt;一、目前的系统现状&lt;/h2&gt;

&lt;p&gt;截止本文编写时间，树莓派4 官方系统仍然不支持 64bit；但是当我在 3b+ 上使用 arch 64bit 以后我发现 32bit 系统和 64bit 系统装在同一个树莓派上在使用时那就是两个完全不一样的树莓派…所以对于这个新的 rpi4 那么必需要用 64bit 的系统；而当前我大致查看到支持 64bit 的系统只有 Ubuntu20、Manjaro 两个，Ubuntu 对我来说太重了(虽然服务器上我一直是 Ubuntu，但是 rpi 上我选择说 “不”)，Manjaro 基于 Arch 这种非常轻量的系统非常适合树莓派这种开发板，所以最终我选择了 Manjaro。但是万万没想到的是 Manjaro 都是带 KDE 什么的图形化的，而我的树莓派只想仍在角落里跑东西，所以说图形化这东西对我来说也没啥用，最后迫于无奈只能自己通过 Manjaro 的工具自己定制了。&lt;/p&gt;

&lt;h2 id=&quot;二manjaro-arm-tools&quot;&gt;二、manjaro-arm-tools&lt;/h2&gt;

&lt;p&gt;经过几经查找各种 Google，发现了 Manjaro 官方提供了自定义创建 arm 镜像的工具 &lt;a href=&quot;https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools&quot;&gt;manjaro-arm-tools&lt;/a&gt;，这个工具简单使用如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先准备一个 Manjaro 系统(虚拟机 x86 即可)&lt;/li&gt;
  &lt;li&gt;然后安装 manjaro-arm-tool 所需&lt;a href=&quot;https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools#dependencies&quot;&gt;依赖工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;添加 Manjaro 的&lt;a href=&quot;https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools#git-version-from-manjaro-strit-repo&quot;&gt;软件源&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;安装 manjaro-arm-tool &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo pacman -Syyu manjaro-strit-keyring &amp;amp;&amp;amp; sudo pacman -S manjaro-arm-tools-git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当工具都准备完成后，只需要执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo buildarmimg -d rpi4 -e minimal&lt;/code&gt; 即可创建 manjaro 的 rpi4 最小镜像。&lt;/p&gt;

&lt;h2 id=&quot;三系统定制&quot;&gt;三、系统定制&lt;/h2&gt;

&lt;p&gt;在使用 manjaro-arm-tool 创建系统以后发现一些细微的东西需要自己调整，比如网络设置常用软件包等，而 manjaro-arm-tool 工具又没有提供太好的自定义处理的一些 hook，所以最后萌生了自己根据 manjaro-arm-tool 来创建自己的 rpi4 系统定制工具的想法。&lt;/p&gt;

&lt;h3 id=&quot;31常用软件包安装&quot;&gt;3.1、常用软件包安装&lt;/h3&gt;

&lt;p&gt;在查看了 manjaro-arm-tool 的源码后可以看到实际上软件安装就是利用 systemd-nspawn 进入到 arm 系统执行 pacman 安装，自己依葫芦画瓢增加一些常用的软件包安装:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-nspawn &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--resolv-conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;copy-host &lt;span class=&quot;nt&quot;&gt;--timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOTFS_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; pacman &lt;span class=&quot;nt&quot;&gt;-Syyu&lt;/span&gt; zsh htop vim wget which git make net-tools dnsutils inetutils iproute2 sysstat nload lsof &lt;span class=&quot;nt&quot;&gt;--noconfirm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;32pacman-镜像&quot;&gt;3.2、pacman 镜像&lt;/h3&gt;

&lt;p&gt;在安装软件包时发现安装速读奇慢，研究以后发现是没有使用国内的镜像源，故增加了国内镜像源的处理:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-nspawn &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--resolv-conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;copy-host &lt;span class=&quot;nt&quot;&gt;--timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOTFS_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; pacman-mirrors &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; China
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;33网络处理&quot;&gt;3.3、网络处理&lt;/h3&gt;

&lt;h4 id=&quot;331有线连接&quot;&gt;3.3.1、有线连接&lt;/h4&gt;

&lt;p&gt;默认的 manjaro-arm-tool 创建的系统网络部分采用 dhspcd 做 dhcp 处理，但是我个人感觉一切尽量精简统一还是比较好的；所以准备网络部分完全由 systemd 接管处理，即直接使用 systemd-networkd 和 systemd-resolved；systemd-networkd 处理相对简单，编写一个配置文件然后 enable systemd-networkd 服务即可:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/systemd/network/10-eth-dhcp.network&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Match]
&lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eth&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Network]
&lt;span class=&quot;nv&quot;&gt;DHCP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;让 systemd-networkd 开机自启动&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-nspawn &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--resolv-conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;copy-host &lt;span class=&quot;nt&quot;&gt;--timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOTFS_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;systemd-networkd.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一开始以为 systemd-resolved 同样 enable 一下就行，后来发现每次开机初始化以后 systemd-resolved 都会被莫明其妙的 disable 掉；经过几经寻找和开 issue 问作者，发现这个操作是被 manjaro-arm-oem-install 包下的脚本执行的，作者的回复意思是大部分带有图形化的版本网络管理工具都会与 systemd-resolved 冲突，所以默认关闭了，这时候我们就要针对 manjaro-arm-oem-install 单独处理一下:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-nspawn &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--resolv-conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;copy-host &lt;span class=&quot;nt&quot;&gt;--timezone&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOTFS_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;systemd-resolved.service
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@systemctl disable systemd-resolved.service 1&amp;gt; /dev/null 2&amp;gt;&amp;amp;1@@g'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOTFS_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/usr/share/manjaro-arm-oem-install/manjaro-arm-oem-install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;332无限连接&quot;&gt;3.3.2、无限连接&lt;/h4&gt;

&lt;p&gt;有线连接只要 systemd-networkd 处理好就能很好的工作，而无线连接目前有很多方案，我一开始想用 &lt;a href=&quot;https://wiki.archlinux.org/index.php/Netctl_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&quot;&gt;netctl&lt;/a&gt;，后来发现这东西虽然是 Arch 亲儿子，但是在系统定制时采用 systemd-nspawn 调用不兼容(因为里面调用了 systemd 的一些命令，这些命令一般只有在开机时才可用)，而且只用 netctl 来管理 wifi 还感觉怪怪的，后来我的想法是要么用就全都用，要么就纯手动不要用这些东西，所以最后的方案是 wpa_supplicant + systemd-networkd 一把梭:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/systemd/network/10-wlan-dhcp.network.example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 1. Generate wifi configuration (don't modify the name of wpa_supplicant-wlan0.conf file)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# $ wpa_passphrase MyNetwork SuperSecretPassphrase &amp;gt; /etc/wpa_supplicant/wpa_supplicant-wlan0.conf&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2. Connect to wifi automatically after booting&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# $ systemctl enable wpa_supplicant@wlan0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 3.Systemd automatically makes dhcp request&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# $ cp /etc/systemd/network/10-wlan-dhcp.network.example /etc/systemd/network/10-wlan-dhcp.network&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Match]
&lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;wlan&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Network]
&lt;span class=&quot;nv&quot;&gt;DHCP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;34内核调整&quot;&gt;3.4、内核调整&lt;/h3&gt;

&lt;p&gt;在上面的一些调整完成后我就启动系统实体机测试了，测试过程中发现安装 docker 以后会有两个警告，大致意思就是不支持 swap limit 和 cpu limit；查询资料以后发现是内核有两个参数没开启(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFIG_MEMCG_SWAP&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONFIG_CFS_BANDWIDTH&lt;/code&gt;)…当然我这种强迫症是不能忍的，没办法就自己在 rpi4 上重新编译了内核(后来我想想还不如用 arch 32bit 然后自己编译 64bit 内核了):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/mritd/linux-rpi4.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;linux-rpi4
&lt;span class=&quot;nv&quot;&gt;MAKEFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'-j4'&lt;/span&gt; makepkg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;35外壳驱动&quot;&gt;3.5、外壳驱动&lt;/h3&gt;

&lt;p&gt;由于我的 rpi4 配的是 ARGON ONE 的外壳，所以电源按钮还有风扇需要驱动才能完美工作，没办法我又编译了 ARGON ONE 外壳的驱动:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/mritd/argonone.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;argonone
makepkg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;四定制脚本&quot;&gt;四、定制脚本&lt;/h2&gt;

&lt;p&gt;综合以上的各种修改以后，我从 manjaro-arm-tool 提取出了定制化的 rpi4 的编译脚本，该脚本目前存放在 &lt;a href=&quot;https://github.com/mritd/manjaro-rpi4&quot;&gt;mritd/manjaro-rpi4&lt;/a&gt; 仓库中；目前使用此脚本编译的系统镜像默认进行了以下处理:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;调整 pacman mirror 为中国&lt;/li&gt;
  &lt;li&gt;安装常用软件包(zsh htop vim wget which…)&lt;/li&gt;
  &lt;li&gt;有线网络完全的 systemd-networkd 接管，resolv.conf 由 systemd-resolved 接管&lt;/li&gt;
  &lt;li&gt;无线网络由 wpa_supplicant 和 systemd-networkd 接管&lt;/li&gt;
  &lt;li&gt;安装自行编译的内核以消除 docker 警告(&lt;strong&gt;自编译内核不影响升级，升级/覆盖安装后自动恢复&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至于 ARGON ONE 的外壳驱动只在 resources 目录下提供了安装包，并未默认安装到系统。&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2020 21:59:15 +0800</pubDate>
        <link>https://mritd.me/2020/06/28/make-a-custom-manjaro-image-for-rpi4/</link>
        <guid isPermaLink="true">https://mritd.me/2020/06/28/make-a-custom-manjaro-image-for-rpi4/</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>如何在 Filebeat 端进行日志处理</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文主要介绍在 ELK 日志系统中，日志切割处理直接在 filebeat 端实现的一些方式；其中包括 filebeat processor 的扩展以及 module 扩展等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一起因&quot;&gt;一、起因&lt;/h2&gt;

&lt;p&gt;目前某项目组日志需要做切割处理，针对日志信息进行分割并提取 k/v 放入 es 中方便查询。这种需求在传统 ELK 中应当由 logstash 组件完成，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gork&lt;/code&gt; 等操作对日志进行过滤、切割等处理。不过很尴尬的是我并不会 ruby，logstash pipeline 的一些配置我也是极其头疼，而且还不想学…更不凑巧的是我会写点 go，&lt;strong&gt;那么理所应当的此时的我对 filebeat 源码产生了一些想法，比如我直接在 filebeat 端完成日志处理，然后直接发 es/logstash，这样似乎更方便，而且还能分摊 logstash 的压力，我感觉这个操作并不过分😂…&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;二需求&quot;&gt;二、需求&lt;/h2&gt;

&lt;p&gt;目前某项目组 java 日志格式如下:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2020-04-30 21:56:30.117&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;api-test-65c8c7cf7f-lng7h&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;http-nio-8080-exec-3&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;INFO&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;com.example.api.common.filter.GlobalDataFilter&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;GlobalDataFilter.java&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;95&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;build commonData from header :&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;romVersion&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;W_V2.1.4&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;softwareVersion&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;15&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;token&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;aFxANNM3pnRYpohvLMSmENydgFSfsmFMgCbFWAosIE=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$$$$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;目前开发约定格式为日志通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$$&lt;/code&gt; 进行分割，日志格式比较简单，但是 logstash 共用(nginx 等各种日志都会往这个 logstash 输出)，不想去折腾 logstash 配置的情况下，只需要让 filebeat 能够直接切割并设置好 k/v 对应既可。&lt;/p&gt;

&lt;h2 id=&quot;三filebeat-module&quot;&gt;三、filebeat module&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;module 部份只做简介，以为实际上依托 es 完成，意义不大。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然在考虑修改 filebeat 源码后，我第一想到的是 filebeat 的 module，这个 module 在官方文档中是个很神奇的东西；通过开启一个 module 就可以对某种日志直接做处理，这种东西似乎就是我想要的；比如我写一个 “项目名” module，然后 filebeat 直接开启这个 module，这个项目的日志就直接自动处理好(听起来就很 “上流”)…&lt;/p&gt;

&lt;p&gt;针对于自定义 module，官方给出了文档: &lt;a href=&quot;https://www.elastic.co/guide/en/beats/devguide/current/filebeat-modules-devguide.html&quot;&gt;Creating a New Filebeat Module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;按照文档操作如下(假设我们的项目名为 cdm):&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 克隆源码&lt;/span&gt;
git clone git@github.com:elastic/beats.git
&lt;span class=&quot;c&quot;&gt;# 切换到稳定分支&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;bests &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; v7.6.2 v7.6.2-module
&lt;span class=&quot;c&quot;&gt;# 创建 module，GO111MODULE 需要设置为 off&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 在 7.6.2 版本官方尚未开始支持 go mod&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;filebeat
&lt;span class=&quot;nv&quot;&gt;GO111MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off make create-module &lt;span class=&quot;nv&quot;&gt;MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cdm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建完成后目录结构如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  filebeat git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v7.6.2-module&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ tree module/cdm
module/cdm
├── _meta
│   ├── config.yml
│   ├── docs.asciidoc
│   └── fields.yml
└── module.yml

1 directory, 4 files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这几个文件具体作用&lt;a href=&quot;https://www.elastic.co/guide/en/beats/devguide/current/filebeat-modules-devguide.html&quot;&gt;官方文档&lt;/a&gt;都有详细的描述；但是根据文档描述光有这几个文件是不够的，&lt;strong&gt;module 只是一个处理集合的定义，尚未包含任何处理，针对真正的处理需要继续创建 fileset，fileset 简单的理解就是针对具体的一组文件集合的处理；&lt;/strong&gt;例如官方 nginx module 中包含两个 fileset: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;error&lt;/code&gt;，这两个一个针对 access 日志处理一个针对 error 日志进行处理；在 fileset 中可以设置默认文件位置、处理方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But… 我翻了 nginx module 的样例配置才发现，module 这个东西实质上只做定义和存储处理表达式，具体的切割处理实际上交由 es 的 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html&quot;&gt;Ingest Node&lt;/a&gt; 处理；表达式里仍需要定义 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grok&lt;/code&gt; 等操作，而且这东西最终会编译到 go 静态文件里；&lt;/strong&gt;此时的我想说一句 “MMP”，本来我是不像写 grok 啥的才来折腾 filebeat，结果这个 module 折腾一圈还是要写 grok 啥的，而且这东西直接借助 es 完成导致压力回到了 es 同时每次修改还得重新编译 filebeat… 所以折腾到这我就放弃了，这已经违背了当初的目的，有兴趣的可以参考以下文档继续折腾:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/beats/devguide/current/filebeat-modules-devguide.html&quot;&gt;Creating a New Filebeat Module&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html&quot;&gt;Ingest nodeedit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-apis.html&quot;&gt;Ingest APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-processors.html&quot;&gt;Processors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;四filebeat-processors&quot;&gt;四、filebeat processors&lt;/h2&gt;

&lt;p&gt;经历了 module 的失望以后，我把目光对准了 processors；processors 是 filebeat 一个强大的功能，顾名思义它可以对 filbeat 收集到的日志进行一些处理；从官方 &lt;a href=&quot;https://www.elastic.co/guide/en/beats/filebeat/current/filtering-and-enhancing-data.html&quot;&gt;Processors&lt;/a&gt; 页面可以看到其内置了大量的 processor；这些 processor 大部份都是直接对日志进行 “写” 操作，所以理论上我们自己写一个 processor 就可以 “为所欲为+为所欲为=为所欲为”。&lt;/p&gt;

&lt;p&gt;不过不幸的是关于 processor 的开发官方并未给出文档，官方认为这是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;high level&lt;/code&gt; 的东西，不过也找到了一个 issue 对其做了相关回答: &lt;a href=&quot;https://github.com/elastic/beats/issues/6760&quot;&gt;How do I write a processor plugin by myself&lt;/a&gt;；所以最好的办法就是直接看已有 processor 的源码抄一个。&lt;/p&gt;

&lt;p&gt;理所应当的找了一个软柿子捏: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_host_metadata&lt;/code&gt;，add_host_metadata processor 顾名思义在每个日志事件(以下简称为 event)中加入宿主机的信息，比如 hostname 啥的；以下为 add_host_metadata processor 的文件结构(processors 代码存储在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libbeat/processors&lt;/code&gt; 目录下)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/axucc.jpg&quot; alt=&quot;dir_tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过阅读源码和 issue 的回答可以看出，我们自定义的 processor 只需要实现 &lt;a href=&quot;https://godoc.org/github.com/elastic/beats/libbeat/processors#Processor&quot;&gt;Processor interface&lt;/a&gt; 既可，这个接口定义如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/xuja6.png&quot; alt=&quot;Processor interface&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过查看 add_host_metadata 的源码，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String() string&lt;/code&gt; 方法只需要返回这个 processor 名称既可(可以包含必要的配置信息)；&lt;strong&gt;而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run(event *beat.Event) (*beat.Event, error)&lt;/code&gt; 方法表示在每一条日志被读取后都会转换为一个 event 对象，我们在方法内进行处理然后把 event 返回既可(其他 processor 可能也要处理)。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/jhtnx.png&quot; alt=&quot;add_host_metadata source&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有了这些信息就简单得多了，毕竟作为&lt;strong&gt;一名合格的 CCE(Ctrl C + Ctrl V + Engineer)&lt;/strong&gt; 抄这种操作还是很简单的，直接照猫画虎写一个就行了&lt;/p&gt;

&lt;p&gt;config.go&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// Config for cdm processor.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;           &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;          &lt;span class=&quot;s&quot;&gt;`config:&quot;name&quot;`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cdm.go&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;strings&quot;&lt;/span&gt;

	&lt;span class=&quot;s&quot;&gt;&quot;github.com/elastic/beats/libbeat/logp&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/pkg/errors&quot;&lt;/span&gt;

	&lt;span class=&quot;s&quot;&gt;&quot;github.com/elastic/beats/libbeat/beat&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/elastic/beats/libbeat/common&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;github.com/elastic/beats/libbeat/processors&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;jsprocessor&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/elastic/beats/libbeat/processors/script/javascript/module/processor&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cdm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;jsprocessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CDM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;processorName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cdm&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;logName&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;processor.cdm&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// New constructs a new cdm processor.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Processor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 配置文件里就一个 Name 字段，结构体留着以后方便扩展&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wrapf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;fail to unpack the %v configuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processorName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// 待分割的每段日志对应的 key&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timestamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;thread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logger&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;serviceName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;traceId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;feTraceId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exception&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;logp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// 真正的日志处理逻辑&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// 为了保证后面的 processor 正常处理，这里面没有 return 任何 error，只是简单的打印&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 尝试获取 message，理论上这一步不应该出现问题&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed to parse message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// 分割日志&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fieldsValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debugf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message fields: %v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldsVaule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 为了保证不会出现数组越界需要判断一下(万一弄出个格式不正常的日志过来保证不崩)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;incorrect field length: %d, expected length: %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// 这里遍历然后赛会到 event 既可&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MapStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PutValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrimSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeepUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;processorName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;写好代码以后就可以编译一个自己的 filebeat 了(开心ing)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;filebeat
&lt;span class=&quot;c&quot;&gt;# 如果想交叉编译 linux 需要增加 GOOS=linux 变量 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GO111MODULE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后编写配置文件进行测试，日志相关字段已经成功塞到了 event 中，这样我直接发到 es 或者 logstash 就行了。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;filebeat.inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;log&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/Users/natural/tmp/cdm.log&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cdm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;~&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;multiline.pattern&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^\d{4}-\d{1,2}-\d{1,2}&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;multiline.match&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;after&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;multiline.negate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;multiline.timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;五script-processor&quot;&gt;五、script processor&lt;/h2&gt;

&lt;p&gt;在我折腾完源码以后，反思一下其实这种方式需要自己编译 filebeat，而且每次规则修改也很不方便，唯一的好处真的就是用代码可以 “为所欲为”；反过来一想 “filebeat 有没有 processor 的扩展呢？脚本热加载那种？” 答案是使用 script processor，&lt;strong&gt;script processor 虽然名字上是个 processor，实际上其包含了完整的 ECMA 5.1 js 规范实现；结论就是我们可以写一些 js 脚本来处理日志，然后 filebeat 每次启动后加载这些脚本既可。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;script processor 的使用方式很简单，js 文件中只需要包含一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function process(event)&lt;/code&gt; 方法既可，与自己用 go 实现的 processor 类似，每行日志也会形成一个 event 对象然后调用这个方法进行处理；目前 event 对象可用的 api 需要参考&lt;a href=&quot;https://www.elastic.co/guide/en/beats/filebeat/current/processor-script.html#_event_api&quot;&gt;官方文档&lt;/a&gt;；&lt;strong&gt;需要注意的是 script processor 目前只支持 ECMA 5.1 语法规范，超过这个范围的语法是不被支持；&lt;/strong&gt;实际上其根本是借助了 &lt;a href=&quot;https://github.com/dop251/goja&quot;&gt;https://github.com/dop251/goja&lt;/a&gt; 这个库来实现的。同时为了方便开发调试，script processor 也增加了一些 nodejs 的兼容 module，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt; 等方法是可用的；以下为 js 处理上面日志的逻辑:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;traceId&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;feTraceId&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;failed to get message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fieldValues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;incorrect field length&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fieldValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;写好脚本后调整配置测试既可，如果 js 编写有问题，可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log&lt;/code&gt; 来打印日志进行不断的调试&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;filebeat.inputs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;log&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/Users/natural/tmp/cdm.log&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;js&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cdm&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cdm.js&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;multiline.pattern&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;^\d{4}-\d{1,2}-\d{1,2}&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;multiline.match&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;after&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;multiline.negate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;multiline.timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;需要注意的是目前 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang&lt;/code&gt; 的值只能为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javascript&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt;(官方文档写的只能是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javascript&lt;/code&gt;)；根据代码来看后续 script processor 有可能支持其他脚本语言，个人认为主要取决于其他脚本语言有没有纯 go 实现的 runtime，如果有的话未来很有可能被整合到 script processor 中。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlly1gegg80j1gmj31nc0u0wpa.jpg&quot; alt=&quot;script processor&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;六其他-processor&quot;&gt;六、其他 processor&lt;/h2&gt;

&lt;p&gt;研究完 script processor 后我顿时对其他 processor 也产生了兴趣，随着更多的查看processor 文档，我发现其实大部份过滤分割能力已经有很多 processor 进行了实现，&lt;strong&gt;其完善程度外加可扩展的 script processor 实际能力已经足矣替换掉 logstash 的日志分割过滤处理了。&lt;/strong&gt;比如上面的日志切割其实使用 dissect processor 实现更加简单(这个配置并不完善，只是样例):&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;na&quot;&gt;processors&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dissect&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;message&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;tokenizer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%{timestamp}$$%{hostname}$$%{thread}$$%{level}$$%{logger}$$%{file}$$%{line}$$%{serviceName}$$%{traceId}$$%{feTraceId}$$%{msg}$$%{exception}$$&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除此之外还有很多 processor，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop_event&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop_fields&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timestamp&lt;/code&gt; 等等，感兴趣的可以自行研究。&lt;/p&gt;

&lt;h2 id=&quot;七总结&quot;&gt;七、总结&lt;/h2&gt;

&lt;p&gt;基本上折腾完以后做了一个总结:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;filebeat module&lt;/strong&gt;: 这就是个华而不实的东西，每次修改需要重新编译且扩展能力几近于零，最蛋疼的是实际逻辑通过 es 来完成；我能想到的是唯一应用场景就是官方给我们弄一些 demo 来炫耀用的，比如 nginx module；实际生产中 nginx 日志格式保持原封不动的人我相信少之又少。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;filebeat custom processor&lt;/strong&gt;: 每次修改也需要重新编译且需要会 go 语言还有相关工具链，但是好处就是完全通过代码实现真正的为所欲为；扩展性取决于外部是否对特定位置做了可配置化，比如预留可以配置切割用正则表达式的变量等，最终取决于代码编写者(怎么为所欲为的问题)。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;filebeat script processor&lt;/strong&gt;: 完整 ECMA 5.1 js 规范支持，代码化对日志进行为所欲为，修改不需要重新编译；普通用户我个人觉得是首选，当然同时会写 go 和 js 的就看你想用哪个了。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;filebeat other processor&lt;/strong&gt;: 基本上实现了很多 logstash 的功能，简单用用很舒服，复杂场景还是得撸代码；但是一些特定的 processor 很实用，比如加入宿主机信息的 add_host_metadata processor 等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2020 21:50:33 +0800</pubDate>
        <link>https://mritd.me/2020/06/28/how-to-modify-filebeat-source-code-to-processing-logs/</link>
        <guid isPermaLink="true">https://mritd.me/2020/06/28/how-to-modify-filebeat-source-code-to-processing-logs/</guid>
        
        <category>Kubernetes</category>
        
        
        <category>Kubernetes</category>
        
      </item>
    
      <item>
        <title>如何不通过 docker 下载 docker image</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;这是一个比较骚的动作，但是事实上确实有这个需求，折腾半天找工具看源码，这里记录一下(不想看源码分析啥的请直接跳转到第五部份)。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一起因&quot;&gt;一、起因&lt;/h2&gt;

&lt;p&gt;由于最近某个爬虫业务需要抓取微信公众号的一些文章，某开发小伙伴想到了通过启动安卓虚拟机然后抓包的方式实现；经过几番寻找最终我们选择采用 docker 的方式启动安卓虚拟机，docker 里安卓虚拟机比较成熟的项目我们找到了 &lt;a href=&quot;https://github.com/budtmo/docker-android&quot;&gt;https://github.com/budtmo/docker-android&lt;/a&gt; 这个项目；但是由于众所周知的原因这个 2G+ 的镜像国内拉取是非常慢的，于是我想到了通过国外 VPS 拉取然后 scp 回来… 由于贫穷的原因，当我实际操作的时候遇到了比较尴尬的问题: &lt;strong&gt;VPS 磁盘空间 25G，镜像拉取后解压接近 10G，我需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker save&lt;/code&gt; 成 tar 包再进行打包成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar.gz&lt;/code&gt; 格式 scp 回来，这个时候空间不够用了…&lt;/strong&gt;所以我当时就在想有没有办法让 docker daemon 拉取镜像时不解压？或者说自己通过 HTTP 下载镜像直接存储为 tar？&lt;/p&gt;

&lt;h2 id=&quot;二尝试造轮子&quot;&gt;二、尝试造轮子&lt;/h2&gt;

&lt;p&gt;当出现了上面的问题后，我第一反应就是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、docker 拆分为 moby&lt;/li&gt;
  &lt;li&gt;2、moby 模块化，大部份开源到 &lt;a href=&quot;https://github.com/containers&quot;&gt;containers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;3、&lt;a href=&quot;https://github.com/containers/image&quot;&gt;containers/image&lt;/a&gt; 项目是镜像部份源码&lt;/li&gt;
  &lt;li&gt;4、看 &lt;a href=&quot;https://github.com/containers/image&quot;&gt;containers/image&lt;/a&gt; 源码造轮子&lt;/li&gt;
  &lt;li&gt;5、不确定是否需要 &lt;a href=&quot;https://github.com/containers/storage&quot;&gt;containers/storage&lt;/a&gt; 做存储&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;三猜测源码&quot;&gt;三、猜测源码&lt;/h2&gt;

&lt;p&gt;当我查看 &lt;a href=&quot;https://github.com/containers/image&quot;&gt;containers/image&lt;/a&gt; README 文档时发现其提到了 &lt;a href=&quot;https://github.com/containers/skopeo&quot;&gt;skopeo&lt;/a&gt; 项目，并且很明确的说了&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The containers/image project is only a library with no user interface; you can either incorporate it into your Go programs, or use the skopeo tool:
The skopeo tool uses the containers/image library and takes advantage of many of its features, e.g. skopeo copy exposes the containers/image/copy.Image functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么也就是说镜像下载这块很大可能应该调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containers/image/copy.Image&lt;/code&gt; 完成，随即就看了下源码文档&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/tv7iy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很明显，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;types.ImageReference&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options&lt;/code&gt; 里面的属性啥的我完全看不懂… 😂😂😂&lt;/p&gt;

&lt;h2 id=&quot;四看-skopeo-源码&quot;&gt;四、看 skopeo 源码&lt;/h2&gt;

&lt;p&gt;当 &lt;a href=&quot;https://github.com/containers/image&quot;&gt;containers/image&lt;/a&gt; 源码看不懂时，突然想到 &lt;a href=&quot;https://github.com/containers/skopeo&quot;&gt;skopeo&lt;/a&gt; 调用的是这个玩意，那么依葫芦画瓢看 &lt;a href=&quot;https://github.com/containers/skopeo&quot;&gt;skopeo&lt;/a&gt; 源码应该能行；接下来常规操作 clone skopeo 源码然后编译运行测试；编译后 skopeo 支持命令如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NAME:
   skopeo - Various operations with container images and container image registries

USAGE:
   skopeo &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;global options] &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;options] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;arguments...]

VERSION:
   0.1.42-dev commit: 018a0108b103341526b41289c434b59d65783f6f

COMMANDS:
   copy               Copy an IMAGE-NAME from one location to another
   inspect            Inspect image IMAGE-NAME
   delete             Delete image IMAGE-NAME
   manifest-digest    Compute a manifest digest of a file
   &lt;span class=&quot;nb&quot;&gt;sync               &lt;/span&gt;Synchronize one or more images from one location to another
   standalone-sign    Create a signature using &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;files
   standalone-verify  Verify a signature using &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;files
   list-tags          List tags &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the transport/repository specified by the REPOSITORY-NAME
   &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;, h            Shows a list of commands or &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;one &lt;span class=&quot;nb&quot;&gt;command

&lt;/span&gt;GLOBAL OPTIONS:
   &lt;span class=&quot;nt&quot;&gt;--debug&lt;/span&gt;                     &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;debug output
   &lt;span class=&quot;nt&quot;&gt;--policy&lt;/span&gt; value              Path to a trust policy file
   &lt;span class=&quot;nt&quot;&gt;--insecure-policy&lt;/span&gt;           run the tool without any policy check
   &lt;span class=&quot;nt&quot;&gt;--registries&lt;/span&gt;.d DIR          use registry configuration files &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;DIR &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.g. &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;container signature storage&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--override-arch&lt;/span&gt; ARCH        use ARCH instead of the architecture of the machine &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;choosing images
   &lt;span class=&quot;nt&quot;&gt;--override-os&lt;/span&gt; OS            use OS instead of the running OS &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;choosing images
   &lt;span class=&quot;nt&quot;&gt;--override-variant&lt;/span&gt; VARIANT  use VARIANT instead of the running architecture variant &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;choosing images
   &lt;span class=&quot;nt&quot;&gt;--command-timeout&lt;/span&gt; value     &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;execution &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default: 0s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;                  show &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;               print the version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;我掐指一算调用 copy 命令应该是我要找的那个它&lt;/strong&gt;，所以常规操作打开源码直接看&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/urn3l.png&quot; alt=&quot;copy_cmd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过继续追踪 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alltransports.ParseImageName&lt;/code&gt; 方法最终可以得知 copy 命令的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SOURCE-IMAGE&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DESTINATION-IMAGE&lt;/code&gt; 都支持哪些写法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/ush4t.png&quot; alt=&quot;tp_register&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;每一个 Transport 的实现都提供了 Name 方法，其名称即为 src 或 dest 镜像名称的前缀，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker://nginx:1.17.6&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/7fpap.png&quot; alt=&quot;tp_docker&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;经过测试不同的 Transport 格式并不完全一致(具体看源码)，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker://nginx:1.17.6&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir:/tmp/nginx&lt;/code&gt;；同时这些 Transport 并非完全都适用与 src 与 dest，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tarball:/tmp/nginx.tar&lt;/code&gt; 支持 src 而不支持 dest；&lt;/strong&gt;其判断核心依据为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImageReference.NewImageSource&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImageReference.NewImageDestination&lt;/code&gt; 方法实现是否返回 error&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/jb087.png&quot; alt=&quot;NewImageDestination&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当我看了一会各种 Transport 源码后我发现一件事: &lt;strong&gt;这特么不就是我要造的轮子么！😱😱😱&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;五skopeo-copy-使用&quot;&gt;五、skopeo copy 使用&lt;/h2&gt;

&lt;h3 id=&quot;51不借助-docker-下载镜像&quot;&gt;5.1、不借助 docker 下载镜像&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;skopeo &lt;span class=&quot;nt&quot;&gt;--insecure-policy&lt;/span&gt; copy docker://nginx:1.17.6 docker-archive:/tmp/nginx.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--insecure-policy&lt;/code&gt; 选项用于忽略安全策略配置文件，该命令将会直接通过 http 下载目标镜像并存储为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/nginx.tar&lt;/code&gt;，此文件可以直接通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker load&lt;/code&gt; 命令导入&lt;/p&gt;

&lt;h3 id=&quot;52从-docker-daemon-导出镜像&quot;&gt;5.2、从 docker daemon 导出镜像&lt;/h3&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;skopeo &lt;span class=&quot;nt&quot;&gt;--insecure-policy&lt;/span&gt; copy docker-daemon:nginx:1.17.6 docker-archive:/tmp/nginx.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该命令将会从 docker daemon 导出镜像到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp/nginx.tar&lt;/code&gt;；为什么不用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker save&lt;/code&gt;？因为我是偷懒 dest 也是 docker-archive，实际上 skopeo 可以导出为其他格式比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oci&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oci-archive&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ostree&lt;/code&gt; 等&lt;/p&gt;

&lt;h3 id=&quot;53其他命令&quot;&gt;5.3、其他命令&lt;/h3&gt;

&lt;p&gt;skopeo 还有一些其他的实用命令，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sync&lt;/code&gt; 可以在两个位置之间同步镜像(😂早知道我还写个鸡儿 gcrsync)，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inspect&lt;/code&gt; 可以查看镜像信息等，迫于本人太懒，剩下的请自行查阅文档、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; 以及源码(没错，整篇文章都没写 skopeo 怎么安装)。&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Mar 2020 23:07:34 +0800</pubDate>
        <link>https://mritd.me/2020/03/31/how-to-download-docker-image-without-docker/</link>
        <guid isPermaLink="true">https://mritd.me/2020/03/31/how-to-download-docker-image-without-docker/</guid>
        
        <category>Docker</category>
        
        
        <category>Docker</category>
        
      </item>
    
      <item>
        <title>kubeadm 证书期限调整</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;最近 kubeadm HA 的集群折腾完了，发现集群证书始终是 1 年有效期，然后自己还有点子担心；无奈只能研究一下源码一探究竟了…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一证书管理&quot;&gt;一、证书管理&lt;/h2&gt;

&lt;p&gt;kubeadm 集群安装完成后，证书管理上实际上大致是两大类型:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自动滚动续期&lt;/li&gt;
  &lt;li&gt;手动定期续期&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自动滚动续期类型的证书目前从我所阅读文档和实际测试中目前只有 kubelet 的 client 证书；kubelet client 证书自动滚动涉及到了 &lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/&quot;&gt;TLS bootstrapping&lt;/a&gt; 部份，&lt;strong&gt;其核心由两个 ClusterRole 完成(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:certificates.k8s.io:certificatesigningrequests:nodeclient&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system:certificates.k8s.io:certificatesigningrequests:selfnodeclient&lt;/code&gt;)，针对这两个 ClusterRole kubeadm 在引导期间创建了 &lt;a href=&quot;https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details/#create-a-bootstrap-token&quot;&gt;bootstrap token&lt;/a&gt; 来完成引导期间证书签发(该 Token 24h 失效)，后续通过预先创建的 ClusterRoleBinding(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm:node-autoapprove-bootstrap&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm:node-autoapprove-certificate-rotation&lt;/code&gt;) 完成自动的 node 证书续期；&lt;/strong&gt;kubelet client 证书续期部份涉及到 TLS bootstrapping 太多了，有兴趣的可以仔细查看(最后还是友情提醒: &lt;strong&gt;用 kubeadm 一定要看看 &lt;a href=&quot;https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details&quot;&gt;Implementation details&lt;/a&gt;&lt;/strong&gt;)。&lt;/p&gt;

&lt;p&gt;手动续期的证书目前需要在到期前使用 kubeadm 命令自行续期，这些证书目前可以通过以下命令列出&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 不要在意我的证书过期时间是 10 年，下面会说&lt;/span&gt;
k1.node ➜ kubeadm alpha certs check-expiration
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;check-expiration] Reading configuration from the cluster...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;check-expiration] FYI: You can look at this config file with &lt;span class=&quot;s1&quot;&gt;'kubectl -n kube-system get cm kubeadm-config -oyaml'&lt;/span&gt;

CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED
admin.conf                 Dec 06, 2029 20:58 UTC   9y                                      no
apiserver                  Dec 06, 2029 20:59 UTC   9y              ca                      no
apiserver-kubelet-client   Dec 06, 2029 20:59 UTC   9y              ca                      no
controller-manager.conf    Dec 06, 2029 20:59 UTC   9y                                      no
front-proxy-client         Dec 06, 2029 20:59 UTC   9y              front-proxy-ca          no
scheduler.conf             Dec 06, 2029 20:59 UTC   9y                                      no

CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED
ca                      Jan 13, 2030 08:45 UTC   9y              no
front-proxy-ca          Jan 13, 2030 08:45 UTC   9y              no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;二证书期限调整&quot;&gt;二、证书期限调整&lt;/h2&gt;

&lt;p&gt;上面已经提到了，手动管理部份的证书需要自己用命令续签(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm alpha certs renew all&lt;/code&gt;)，而且你会发现续签以后有效期还是 1 年；kubeadm 的初衷是 &lt;strong&gt;“为快速创建 kubernetes 集群的最佳实践”&lt;/strong&gt;，当然最佳实践包含确保证书安全性，毕竟 Let’s Encrypt 的证书有效期只有 3 个月的情况下 kubeadm 有效期有 1 年已经很不错了；但是对于最佳实践来说，我们公司的集群安全性并不需要那么高，一年续期一次无疑在增加运维人员心智负担(它并不最佳)，所以我们迫切需要一种 “一劳永逸” 的解决方案；当然我目前能想到的就是找到证书签发时在哪设置的有效期，然后想办法改掉它。&lt;/p&gt;

&lt;h3 id=&quot;21源码分析&quot;&gt;2.1、源码分析&lt;/h3&gt;

&lt;p&gt;目前通过宏观角度看整个 kubeadm 集群搭建过程，其中涉及到证书签署大致有两大部份: init  阶段和后期 renew，下面开始分析两个阶段的源码&lt;/p&gt;

&lt;h4 id=&quot;211init-阶段&quot;&gt;2.1.1、init 阶段&lt;/h4&gt;

&lt;p&gt;由于 kubernetes 整个命令行都是通过 cobra 库构建的，那么根据这个库的习惯首先直接从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; 包开始翻，而 kubernetes 源码组织的又比较清晰进而直接定位到 kubeadm 命令包下面；接着打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; 目录一眼就看到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phases&lt;/code&gt;… &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phases&lt;/code&gt; 顾名思义啊，整个 init 都是通过不同的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phases&lt;/code&gt; 完成的，那么直接去 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phases&lt;/code&gt; 包下面找证书阶段的源码既可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/ssdo7.jpg&quot; alt=&quot;init_source&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入到这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;certs.go&lt;/code&gt; 里面，直接列出所有方法，go 的规范里只有首字母大写才会被暴露出去，那么我们直接查看这些方法名既可；从名字上很轻松的看到了这个方法…基本上就是它了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/uoqx4.jpg&quot; alt=&quot;certs.go&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过这个方法的代码会发现最终还是调用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;certSpec.CreateFromCA(cfg, caCert, caKey)&lt;/code&gt;，那么接着看看这个方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/psrho.jpg&quot; alt=&quot;pkiutil.NewCertAndKey&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过这个方法继续往下翻发现调用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkiutil.NewCertAndKey(caCert, caKey, cfg)&lt;/code&gt;，这个方法里最终调用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewSignedCert(config, key, caCert, caKey)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/nel5u.jpg&quot; alt=&quot;NewSignedCert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NewSignedCert&lt;/code&gt; 方法里看到证书有效期实际上是个常量，&lt;strong&gt;那也就意味着我改了这个常量 init 阶段的证书有效期八九不离十的就变了，再通过包名看这个是个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkiutil&lt;/code&gt;… &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xxxxxutil&lt;/code&gt; 明显是公共的，所以推测改了它 renew 阶段应该也会变&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/t3amy.jpg&quot; alt=&quot;CertificateValidity&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;212renew-阶段&quot;&gt;2.1.2、renew 阶段&lt;/h4&gt;

&lt;p&gt;renew 阶段也是老套路，不过稳妥点先从 cmd 找起来，所以先看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpha&lt;/code&gt; 包下的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;certs.go&lt;/code&gt;；这时候方法名语义清晰就很有好处，一下就能找到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newCmdCertsRenewal&lt;/code&gt; 方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/amupo.jpg&quot; alt=&quot;alpha_certs.go&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;newCmdCertsRenewal&lt;/code&gt; 方法实际上没啥实现，所以目测实现是从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRenewSubCommands&lt;/code&gt; 实现的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/8c38y.jpg&quot; alt=&quot;getRenewSubCommands&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getRenewSubCommands&lt;/code&gt; 以后发现上面全是命令行库、配置文件参数啥的处理，核心在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renewCert&lt;/code&gt; 上，从这个方法里发现还有意外收获: &lt;strong&gt;renew 时实际上分两种情况处理，一种是使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--use-api&lt;/code&gt; 选项，另一种是未使用&lt;/strong&gt;；当然根据上面的命令来说我们没使用，那么看 else 部份就行了(没看源码之前我特么居然没看 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; 不知道有这个选项)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/9zsgp.jpg&quot; alt=&quot;renewCert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;else 部份源码最终还是调用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RenewUsingLocalCA&lt;/code&gt; 方法，这个方法一直往下跟会有一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Renew&lt;/code&gt; 方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/s3a5c.jpg&quot; alt=&quot;Renew&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个方法一点进去… &lt;strong&gt;我上面的想法是对的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/08cnb.jpg&quot; alt=&quot;FileRenewer_Renew&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;213其他推测&quot;&gt;2.1.3、其他推测&lt;/h4&gt;

&lt;p&gt;根据刚刚查看代码可以看到在 renew 阶段判断了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--use-api&lt;/code&gt; 选项是否使用，通过跟踪源码发现最终会调用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RenewUsingCSRAPI&lt;/code&gt; 方法上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RenewUsingCSRAPI&lt;/code&gt; 会调用集群 CSR Api 执行证书签署&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/xivs9.png&quot; alt=&quot;RenewUsingCSRAPI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;有了这个发现后基本上可以推测出这一步通过集群完成，那么按理说是应该受到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-controller-manager&lt;/code&gt; 组件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--experimental-cluster-signing-duration&lt;/code&gt; 影响。&lt;/p&gt;

&lt;h3 id=&quot;22测试验证&quot;&gt;2.2、测试验证&lt;/h3&gt;

&lt;h4 id=&quot;221验证修改源码&quot;&gt;2.2.1、验证修改源码&lt;/h4&gt;

&lt;p&gt;想验证修改源码是否有效只需要修改源码重新 build 出 kubeadm 命令，然后使用这个特定版本的 kubeadm renew 证书测试既可，源码调整的位置如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/qaavr.png&quot; alt=&quot;update_source&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后命令行下执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make cross&lt;/code&gt; 进行跨平台交叉编译(如果过你在 linux amd64 平台下则直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 既可)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  kubernetes git:&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v1.17.4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; ✗ make cross
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt;: /proc/meminfo: No such file or directory
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt;: /proc/meminfo: No such file or directory
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:43:19] Multiple platforms requested and available 64G &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; threshold 40G, building platforms &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;parallel
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:43:19] Building go targets &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;linux/amd64 linux/arm linux/arm64 linux/s390x linux/ppc64le&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;parallel &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;output will appear &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;a burst when &lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    cmd/kube-proxy
    cmd/kube-apiserver
    cmd/kube-controller-manager
    cmd/kubelet
    cmd/kubeadm
    cmd/kube-scheduler
    vendor/k8s.io/apiextensions-apiserver
    cluster/gce/gci/mounter
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:43:19] linux/amd64: build started
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:47:24] linux/amd64: build finished
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:43:19] linux/arm: build started
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:47:23] linux/arm: build finished
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:43:19] linux/arm64: build started
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:47:23] linux/arm64: build finished
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:43:19] linux/s390x: build started
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:47:24] linux/s390x: build finished
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:43:19] linux/ppc64le: build started
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:47:24] linux/ppc64le: build finished
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt;: /proc/meminfo: No such file or directory
&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt;: /proc/meminfo: No such file or directory
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:47:52] Multiple platforms requested and available 64G &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; threshold 40G, building platforms &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;parallel
+++ &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0116 23:47:52] Building go targets &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;linux/amd64 linux/arm
&lt;span class=&quot;c&quot;&gt;# ... 省略编译日志&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;编译完成后能够在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_output/local/bin/linux/amd64&lt;/code&gt; 下找到刚刚编译成功的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 文件，将编译好的 kubeadm scp 到已经存在集群上执行 renew，然后查看证书时间&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/i3laa.png&quot; alt=&quot;kubeadm_renew&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;经过测试后确认源码修改方式有效&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;222验证调整-csr-api&quot;&gt;2.2.2、验证调整 CSR API&lt;/h4&gt;

&lt;p&gt;根据推测当使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--use-api&lt;/code&gt; 会受到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-controller-manager&lt;/code&gt; 组件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--experimental-cluster-signing-duration&lt;/code&gt; 影响，从而从集群中下发证书；所以首先在启动集群时需要将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--experimental-cluster-signing-duration&lt;/code&gt; 调整为 10 年，然后再进行测试&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;controllerManager&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;extraArgs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;node-cidr-mask-size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;19&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;deployment-controller-sync-period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10s&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 在 kubeadm 配置文件中设置证书有效期为 10 年&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;experimental-cluster-signing-duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;86700h&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;node-monitor-grace-period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;20s&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pod-eviction-timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2m&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;terminated-pod-gc-threshold&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--use-api&lt;/code&gt; 选项进行 renew&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm alpha certs renew all &lt;span class=&quot;nt&quot;&gt;--use-api&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时会发现日志中打印出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[certs] Certificate request &quot;kubeadm-cert-kubernetes-admin-648w4&quot; created&lt;/code&gt; 字样，接下来从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-system&lt;/code&gt; 的 namespace 中能够看到相关 csr&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/54awl.png&quot; alt=&quot;list_csr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时我们开始手动批准证书，每次批准完成一个 csr，紧接着 kubeadm 会创建另一个 csr&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/tdde7.png&quot; alt=&quot;approve_csr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当所有 csr 被批准后，再次查看集群证书发现证书期限确实被调整了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/081qe.png&quot; alt=&quot;success&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三总结&quot;&gt;三、总结&lt;/h2&gt;

&lt;p&gt;总结一下，调整 kubeadm 证书期限有两种方案；第一种直接修改源码，耗时耗力还得会 go，最后还要跑跨平台编译(很耗时)；第二种在启动集群时调整 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-controller-manager&lt;/code&gt; 组件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--experimental-cluster-signing-duration&lt;/code&gt; 参数，集群创建好后手动 renew 一下并批准相关 csr。&lt;/p&gt;

&lt;p&gt;两种方案各有利弊，修改源码方式意味着在 client 端签发处理，不会对集群产生永久性影响，也就是说哪天你想 “反悔了” 你不需要修改集群什么配置，直接用官方 kubeadm renew 一下就会变回一年期限的证书；改集群参数实现的方式意味着你不需要懂 go 代码，只需要常规的集群配置既可实现，同时你也不需要跑几十分钟的交叉编译，不需要为编译过程中的网络问题而烦恼；所以最后使用哪种方案因人因情况而定吧。&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jan 2020 21:38:01 +0800</pubDate>
        <link>https://mritd.me/2020/01/21/how-to-extend-the-validity-of-your-kubeadm-certificate/</link>
        <guid isPermaLink="true">https://mritd.me/2020/01/21/how-to-extend-the-validity-of-your-kubeadm-certificate/</guid>
        
        <category>Kubernetes</category>
        
        
        <category>Kubernetes</category>
        
      </item>
    
      <item>
        <title>kubeadm 集群升级</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;真是不巧，刚折腾完 kubeadm 搭建集群(v1.17.0)，第二天早上醒来特么的 v1.17.1 发布了；这我能忍么，肯定不能忍，然后就开始了集群升级之路…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一升级前准备&quot;&gt;一、升级前准备&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;确保你的集群是 kubeadm 搭建的(等同于废话)&lt;/li&gt;
  &lt;li&gt;确保当前集群已经完成 HA(多个 master 节点)&lt;/li&gt;
  &lt;li&gt;确保在夜深人静的时候(无大量业务流量)&lt;/li&gt;
  &lt;li&gt;确保集群版本大于 v1.16.0&lt;/li&gt;
  &lt;li&gt;确保已经仔细阅读了目标版本 CHANGELOG&lt;/li&gt;
  &lt;li&gt;确保做好了完整地集群备份&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二升级注意事项&quot;&gt;二、升级注意事项&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;升级后所有集群组件 Pod 会重启(hash 变更)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;升级时 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 版本必须大于或等于目标版本&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;升级期间所有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-proxy&lt;/code&gt; 组件会有一次全节点滚动更新&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;升级只支持顺次进行，不支持跨版本升级(You only can upgrade from one MINOR version to the next MINOR version, or between PATCH versions of the same MINOR. That is, you cannot skip MINOR versions when you upgrade. For example, you can upgrade from 1.y to 1.y+1, but not from 1.y to 1.y+2.)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于升级版本问题…虽然是这么说的，但是官方文档样例代码里是从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.16.0&lt;/code&gt; 升级到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.17.0&lt;/code&gt;；可能是我理解有误，跨大版本升级好像官方没提，具体啥后果不清楚…&lt;/p&gt;

&lt;h2 id=&quot;三升级-master&quot;&gt;三、升级 Master&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;事实上所有升级工作主要是针对 master 节点做的，所以整个升级流程中最重要的是如何把 master 升级好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;31升级-kubeadmkubectl&quot;&gt;3.1、升级 kubeadm、kubectl&lt;/h3&gt;

&lt;p&gt;首先由于升级限制，必须先将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; 升级到大于等于目标版本&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# replace x in 1.17.x-00 with the latest patch version&lt;/span&gt;
apt-mark unhold kubeadm kubectl
apt-get update
apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kubeadm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.17.x-00 &lt;span class=&quot;nv&quot;&gt;kubectl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.17.x-00
apt-mark hold kubeadm kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然如果你之前没有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hold&lt;/code&gt; 住这几个软件包的版本，那么就不需要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unhold&lt;/code&gt;；我的做法可能比较极端…一般为了防止后面的误升级安装完成后我会直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rename&lt;/code&gt; 掉相关软件包的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt source&lt;/code&gt; 配置(从根本上防止手贱)。&lt;/p&gt;

&lt;h3 id=&quot;32升级前准备&quot;&gt;3.2、升级前准备&lt;/h3&gt;

&lt;h4 id=&quot;321配置修改&quot;&gt;3.2.1、配置修改&lt;/h4&gt;

&lt;p&gt;对于高级玩家一般安装集群时都会自定义很多组件参数，此时不可避免的会采用配置文件；所以安装完新版本的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 后就要着手修改配置文件中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubernetesVersion&lt;/code&gt; 字段为目标集群版本，当然有其他变更也可以一起修改。&lt;/p&gt;

&lt;h4 id=&quot;322节点驱逐&quot;&gt;3.2.2、节点驱逐&lt;/h4&gt;

&lt;p&gt;如果你的 master 节点也当作 node 在跑一些工作负载，则需要执行以下命令驱逐这些 pod 并使节点进入维护模式(禁止调度)。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 将 NODE_NAME 换成 Master 节点名称&lt;/span&gt;
kubectl drain NODE_NAME &lt;span class=&quot;nt&quot;&gt;--ignore-daemonsets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;323查看升级计划&quot;&gt;3.2.3、查看升级计划&lt;/h4&gt;

&lt;p&gt;完成节点驱逐以后，可以通过以下命令查看升级计划；&lt;strong&gt;升级计划中列出了升级期间要执行的所有步骤以及相关警告，一定要仔细查看。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;k8s16.node ➜  ~ kubeadm upgrade plan &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/kubernetes/kubeadm.yaml
W0115 10:59:52.586204     983 validation.go:28] Cannot validate kube-proxy config - no validator is available
W0115 10:59:52.586241     983 validation.go:28] Cannot validate kubelet config - no validator is available
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;upgrade/config] Making sure the configuration is correct:
W0115 10:59:52.605458     983 common.go:94] WARNING: Usage of the &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; flag &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;reconfiguring the cluster during upgrade is not recommended!
W0115 10:59:52.607258     983 validation.go:28] Cannot validate kube-proxy config - no validator is available
W0115 10:59:52.607274     983 validation.go:28] Cannot validate kubelet config - no validator is available
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;preflight] Running pre-flight checks.
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;upgrade] Making sure the cluster is healthy:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;upgrade] Fetching available versions to upgrade to
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;upgrade/versions] Cluster version: v1.17.0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;upgrade/versions] kubeadm version: v1.17.1

External components that should be upgraded manually before you upgrade the control plane with &lt;span class=&quot;s1&quot;&gt;'kubeadm upgrade apply'&lt;/span&gt;:
COMPONENT   CURRENT   AVAILABLE
Etcd        3.3.18    3.4.3-0

Components that must be upgraded manually after you have upgraded the control plane with &lt;span class=&quot;s1&quot;&gt;'kubeadm upgrade apply'&lt;/span&gt;:
COMPONENT   CURRENT       AVAILABLE
Kubelet     5 x v1.17.0   v1.17.1

Upgrade to the latest version &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the v1.17 series:

COMPONENT            CURRENT   AVAILABLE
API Server           v1.17.0   v1.17.1
Controller Manager   v1.17.0   v1.17.1
Scheduler            v1.17.0   v1.17.1
Kube Proxy           v1.17.0   v1.17.1
CoreDNS              1.6.5     1.6.5

You can now apply the upgrade by executing the following &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;:

        kubeadm upgrade apply v1.17.1

_____________________________________________________________________
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;33执行升级&quot;&gt;3.3、执行升级&lt;/h3&gt;

&lt;p&gt;确认好升级计划以后，只需要一条命令既可将当前 master 节点升级到目标版本&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm upgrade apply v1.17.1 &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/kubernetes/kubeadm.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;升级期间会打印很详细的日志，在日志中可以实时观察到升级流程，建议仔细关注升级流程；&lt;strong&gt;在最后一步会有一条日志 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[addons] Applied essential addon: kube-proxy&lt;/code&gt;，这意味着集群开始更新 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-proxy&lt;/code&gt; 组件，该组件目前是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;daemonset&lt;/code&gt; 方式启动的；这会意味着此时会造成全节点的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-proxy&lt;/code&gt; 更新；&lt;/strong&gt;理论上不会有很大影响，但是升级是还是需要注意一下这一步操作，在我的观察中似乎 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-proxy&lt;/code&gt; 也是通过滚动更新完成的，所以问题应该不大。&lt;/p&gt;

&lt;h3 id=&quot;34升级-kubelet&quot;&gt;3.4、升级 kubelet&lt;/h3&gt;

&lt;p&gt;在单个 master 上升级完成后，&lt;strong&gt;只会升级本节点的 master 相关组件和全节点的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-proxy&lt;/code&gt; 组件；&lt;/strong&gt;由于 kubelet 是在宿主机安装的，所以需要通过包管理器手动升级 kubelet&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# replace x in 1.17.x-00 with the latest patch version&lt;/span&gt;
apt-mark unhold kubelet
apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kubelet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.17.x-00
apt-mark hold kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更新完成后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl restart kubelet&lt;/code&gt; 重启，并等待启动成功既可；最后不要忘记解除当前节点的维护模式(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uncordon&lt;/code&gt;)。&lt;/p&gt;

&lt;h3 id=&quot;35升级其他-master&quot;&gt;3.5、升级其他 Master&lt;/h3&gt;

&lt;p&gt;当其中一个 master 节点升级完成后，其他的 master 升级就会相对简单的多；&lt;strong&gt;首先国际惯例升级一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; 软件包，然后直接在其他 master 节点执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm upgrade node&lt;/code&gt; 既可。&lt;/strong&gt;由于 apiserver 等组件配置已经在升级第一个 master 时上传到了集群的 configMap 中，所以事实上其他 master 节点只是正常拉取然后重启相关组件既可；这一步同样会输出详细日志，可以仔细观察进度，&lt;strong&gt;最后不要忘记升级之前先进入维护模式，升级完成后重新安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; 并关闭节点维护模式。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;四升级-node&quot;&gt;四、升级 Node&lt;/h2&gt;

&lt;p&gt;node 节点的升级实际上在升级完 master 节点以后不需要什么特殊操作，node 节点唯一需要升级的就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; 组件；&lt;strong&gt;首先在 node 节点执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm upgrade node&lt;/code&gt; 命令，该命令会拉取集群内的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; 配置文件，然后重新安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; 重启既可；&lt;/strong&gt;同样升级 node 节点时不要忘记开启维护模式。针对于 CNI 组件请按需手动升级，并且确认好 CNI 组件的兼容版本。&lt;/p&gt;

&lt;h2 id=&quot;五验证集群&quot;&gt;五、验证集群&lt;/h2&gt;

&lt;p&gt;所有组件升级完成后，可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl describe POD_NAME&lt;/code&gt; 的方式验证 master 组件是否都升级到了最新版本；通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kuebctl version&lt;/code&gt; 命令验证 api 相关信息(HA rr 轮训模式下可以多执行几遍)；还有就是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get node -o wide&lt;/code&gt; 查看相关 node 的信息，确保 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; 都升级成功，同时全部节点维护模式都已经关闭，其他细节可以参考&lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jan 2020 21:34:38 +0800</pubDate>
        <link>https://mritd.me/2020/01/21/how-to-upgrade-kubeadm-cluster/</link>
        <guid isPermaLink="true">https://mritd.me/2020/01/21/how-to-upgrade-kubeadm-cluster/</guid>
        
        <category>Kubernetes</category>
        
        
        <category>Kubernetes</category>
        
      </item>
    
      <item>
        <title>kubeadm 搭建 HA kubernetes 集群</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;距离上一次折腾 kubeadm 大约已经一两年了(记不太清了)，在很久一段时间内一直采用二进制部署的方式来部署 kubernetes 集群，随着 kubeadm 的不断稳定，目前终于可以重新试试这个不错的工具了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h2&gt;

&lt;p&gt;搭建环境为 5 台虚拟机，每台虚拟机配置为 4 核心 8G 内存，虚拟机 IP 范围为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;172.16.10.21~25&lt;/code&gt;，其他软件配置如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;os version: ubuntu 18.04&lt;/li&gt;
  &lt;li&gt;kubeadm version: 1.17.0&lt;/li&gt;
  &lt;li&gt;kubernetes version: 1.17.0&lt;/li&gt;
  &lt;li&gt;etcd version: 3.3.18&lt;/li&gt;
  &lt;li&gt;docker version: 19.03.5&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;二ha-方案&quot;&gt;二、HA 方案&lt;/h2&gt;

&lt;p&gt;目前的 HA 方案与官方的不同，官方 HA 方案推荐使用类似 haproxy 等工具进行 4 层代理 apiserver，但是同样会有一个问题就是我们还需要对这个 haproxy 做 HA；由于目前我们实际生产环境都是多个独立的小集群，所以单独弄 2 台 haproxy + keeplived 去维持这个 apiserver LB 的 HA 有点不划算；所以还是准备延续老的 HA 方案，将外部 apiserver 的 4 层 LB 前置到每个 node 节点上；&lt;strong&gt;目前是采用在每个 node 节点上部署 nginx 4 层代理所有 apiserver，nginx 本身资源消耗低而且请求量不大，综合来说对宿主机影响很小；&lt;/strong&gt;以下为 HA 的大致方案图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/mktld.png&quot; alt=&quot;ha&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;三环境初始化&quot;&gt;三、环境初始化&lt;/h2&gt;

&lt;h3 id=&quot;31系统环境&quot;&gt;3.1、系统环境&lt;/h3&gt;

&lt;p&gt;由于个人操作习惯原因，目前已经将常用的初始化环境整理到一个小脚本里了，脚本具体参见 &lt;a href=&quot;https://github.com/mritd/shell_scripts/blob/master/init_ubuntu.sh&quot;&gt;mritd/shell_scripts&lt;/a&gt; 仓库，基本上常用的初始化内容为:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设置 locale(en_US.UTF-8)&lt;/li&gt;
  &lt;li&gt;设置时区(Asia/Shanghai)&lt;/li&gt;
  &lt;li&gt;更新所有系统软件包(system update)&lt;/li&gt;
  &lt;li&gt;配置 vim(vim8 + 常用插件、配色)&lt;/li&gt;
  &lt;li&gt;ohmyzsh(别跟我说不兼容 bash 脚本，我就是喜欢)&lt;/li&gt;
  &lt;li&gt;docker&lt;/li&gt;
  &lt;li&gt;ctop(一个 docker 的辅助工具)&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;在以上初始化中，实际对 kubernetes 安装产生影响的主要有三个地方:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;docker 的 cgroup driver 调整为 systemd，具体参考 &lt;a href=&quot;https://github.com/mritd/config/blob/master/docker/docker.service&quot;&gt;docker.service&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;docker 一定要限制 conatiner 日志大小，防止 apiserver 等日志大量输出导致磁盘占用过大&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conntrack&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipvsadm&lt;/code&gt;，后面可能需要借助其排查问题&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32配置-ipvs&quot;&gt;3.2、配置 ipvs&lt;/h3&gt;

&lt;p&gt;由于后面 kube-proxy 需要使用 ipvs 模式，所以需要对内核参数、模块做一些调整，调整命令如下:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/sysctl.conf &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
net.ipv4.ip_forward=1
net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/modules &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
ip_vs
ip_vs_lc
ip_vs_wlc
ip_vs_rr
ip_vs_wrr
ip_vs_lblc
ip_vs_lblcr
ip_vs_dh
ip_vs_sh
ip_vs_fo
ip_vs_nq
ip_vs_sed
ip_vs_ftp
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;配置完成后切记需要重启，重启完成后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lsmod | grep ip_vs&lt;/code&gt; 验证相关 ipvs 模块加载是否正常，本文将主要使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_vs_wrr&lt;/code&gt;，所以目前只关注这个模块既可。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/4irz1.png&quot; alt=&quot;ipvs_mode&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;四安装-etcd&quot;&gt;四、安装 Etcd&lt;/h2&gt;

&lt;h3 id=&quot;41方案选择&quot;&gt;4.1、方案选择&lt;/h3&gt;

&lt;p&gt;官方对于集群 HA 给出了两种有关于 Etcd 的部署方案:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一种是深度耦合到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 上，即每个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 一个 etcd&lt;/li&gt;
  &lt;li&gt;另一种是使用外部的 Etcd 集群，通过在配置中指定外部集群让 apiserver 等组件连接&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在测试深度耦合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 方案后，发现一些比较恶心的问题；比如说开始创建第二个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 时配置写错了需要重建，此时你一旦删除第二个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 会导致第一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 也会失败，原因是&lt;strong&gt;创建第二个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 时 kubeadm 已经自动完成了 etcd 的集群模式，当删除第二个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 的时候由于集群可用原因会导致第一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;control plane&lt;/code&gt; 下的 etcd 发现节点失联从而也不提供服务；&lt;/strong&gt;所以综合考虑到后续迁移、灾备等因素，这里选择了将 etcd 放置在外部集群中；同样也方便我以后各种折腾应对一些极端情况啥的。&lt;/p&gt;

&lt;h3 id=&quot;42部署-etcd&quot;&gt;4.2、部署 Etcd&lt;/h3&gt;

&lt;p&gt;确定了需要在外部部署 etcd 集群后，只需要开干就完事了；查了一下 ubuntu 官方源已经有了 etcd 安装包，但是版本比较老，测试了一下 golang 的 build 版本是 1.10；所以我还是选择了从官方 release 下载最新的版本安装；当然最后还是因为懒，我自己打了一个 deb 包… deb 包可以从这个项目 &lt;a href=&quot;https://github.com/mritd/etcd-deb/releases&quot;&gt;mritd/etcd-deb&lt;/a&gt; 下载，担心安全性的可以利用项目脚本自己打包，以下是安装过程:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载软件包&lt;/span&gt;
wget https://github.com/mritd/etcd-deb/releases/download/v3.3.18/etcd_3.3.18_amd64.deb
wget https://github.com/mritd/etcd-deb/releases/download/v3.3.18/cfssl_1.4.1_amd64.deb
&lt;span class=&quot;c&quot;&gt;# 安装 etcd(至少在 3 台节点上执行)&lt;/span&gt;
dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; etcd_3.3.18_amd64.deb cfssl_1.4.1_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;既然自己部署 etcd，那么证书签署啥的还得自己来了，证书签署这里借助 cfssl 工具，cfssl 目前提供了 deb 的 make target，但是没找到 deb 包，所以也自己 build 了(担心安全性的可自行去官方下载)；&lt;/strong&gt;接着编辑一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/etcd/cfssl/etcd-csr.json&lt;/code&gt; 文件，用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/etcd/cfssl/create.sh&lt;/code&gt; 脚本创建证书，并将证书复制到指定目录&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建证书&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/etcd/cfssl &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./create.sh
&lt;span class=&quot;c&quot;&gt;# 复制证书&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; /etc/etcd/cfssl/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem /etc/etcd/ssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后在 3 台节点上修改配置，并将刚刚创建的证书同步到其他两台节点启动既可；下面是单台节点的配置样例&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/etcd/etcd.conf&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [member]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;etcd1
&lt;span class=&quot;nv&quot;&gt;ETCD_DATA_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/etcd/data&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_WAL_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/etcd/wal&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_SNAPSHOT_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_HEARTBEAT_INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_ELECTION_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1000&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_PEER_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://172.16.10.21:2380&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://172.16.10.21:2379,http://127.0.0.1:2379&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_MAX_SNAPSHOTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_MAX_WALS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_CORS=&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [cluster]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_ADVERTISE_PEER_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://172.16.10.21:2380&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd1=https://172.16.10.21:2380,etcd2=https://172.16.10.22:2380,etcd3=https://172.16.10.23:2380&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER_STATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd-cluster&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_ADVERTISE_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://172.16.10.21:2379&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_SRV=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_PROXY=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_AUTO_COMPACTION_RETENTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;24&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [proxy]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY=&quot;off&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [security]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-key.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_CLIENT_CERT_AUTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_TRUSTED_CA_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_AUTO_TLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-key.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_CLIENT_CERT_AUTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_TRUSTED_CA_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_AUTO_TLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [logging]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DEBUG=&quot;false&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# examples for -log-package-levels etcdserver=WARNING,security=DEBUG&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [performance]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_QUOTA_BACKEND_BYTES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5368709120&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_AUTO_COMPACTION_RETENTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意: 其他两台节点请调整 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETCD_NAME&lt;/code&gt; 为不重复的其他名称，调整 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETCD_LISTEN_PEER_URLS&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETCD_LISTEN_CLIENT_URLS&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETCD_INITIAL_ADVERTISE_PEER_URLS&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETCD_ADVERTISE_CLIENT_URLS&lt;/code&gt; 为其他节点对应的 IP；同时生产环境请将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETCD_INITIAL_CLUSTER_TOKEN&lt;/code&gt; 替换为复杂的 token&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 同步证书&lt;/span&gt;
scp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /etc/etcd/ssl 172.16.10.22:/etc/etcd/ssl
scp &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; /etc/etcd/ssl 172.16.10.23:/etc/etcd/ssl
&lt;span class=&quot;c&quot;&gt;# 修复权限(3台节点都要执行)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; etcd:etcd /etc/etcd
&lt;span class=&quot;c&quot;&gt;# 最后每个节点依次启动既可&lt;/span&gt;
systemctl start etcd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动完成后可以通过以下命令测试是否正常&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看集群成员&lt;/span&gt;
k1.node ➜ etcdctl member list

3cbbaf77904c6153, started, etcd2, https://172.16.10.22:2380, https://172.16.10.22:2379
8eb7652b6bd99c30, started, etcd1, https://172.16.10.21:2380, https://172.16.10.21:2379
91f4e10726460d8c, started, etcd3, https://172.16.10.23:2380, https://172.16.10.23:2379

&lt;span class=&quot;c&quot;&gt;# 检测集群健康状态&lt;/span&gt;
k1.node ➜ etcdctl endpoint health &lt;span class=&quot;nt&quot;&gt;--cacert&lt;/span&gt; /etc/etcd/ssl/etcd-root-ca.pem &lt;span class=&quot;nt&quot;&gt;--cert&lt;/span&gt; /etc/etcd/ssl/etcd.pem &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt; /etc/etcd/ssl/etcd-key.pem &lt;span class=&quot;nt&quot;&gt;--endpoints&lt;/span&gt; https://172.16.10.21:2379,https://172.16.10.22:2379,https://172.16.10.23:2379

https://172.16.10.21:2379 is healthy: successfully committed proposal: took &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 16.632246ms
https://172.16.10.23:2379 is healthy: successfully committed proposal: took &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 21.122603ms
https://172.16.10.22:2379 is healthy: successfully committed proposal: took &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 22.592005ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;五部署-kubernetes&quot;&gt;五、部署 Kubernetes&lt;/h2&gt;

&lt;h3 id=&quot;51安装-kueadm&quot;&gt;5.1、安装 kueadm&lt;/h3&gt;

&lt;p&gt;安装 kubeadm 没什么好说的，国内被墙用阿里的源既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; apt-transport-https
curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;/etc/apt/sources.list.d/kubernetes.list
deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;apt update

&lt;span class=&quot;c&quot;&gt;# ebtables、ethtool kubelet 可能会用，具体忘了，反正从官方文档上看到的&lt;/span&gt;
apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;kubelet kubeadm kubectl ebtables ethtool &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;52部署-nginx&quot;&gt;5.2、部署 Nginx&lt;/h3&gt;

&lt;p&gt;从上面的 HA 架构图上可以看到，为了维持 apiserver 的 HA，需要在每个机器上部署一个 nginx 做 4 层的 LB；为保证后续的 node 节点正常加入，需要首先行部署 nginx；nginx 安装同样喜欢偷懒，直接 docker 跑了…毕竟都开始 kubeadm 了，那么也没必要去纠结 docker 是否稳定的问题了；以下为 nginx 相关配置&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;apiserver-proxy.conf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error_log stderr notice&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

worker_processes auto&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
events &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	multi_accept on&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	use epoll&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	worker_connections 1024&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

stream &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    upstream kube_apiserver &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        least_conn&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 后端为三台 master 节点的 apiserver 地址&lt;/span&gt;
        server 172.16.10.21:5443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        server 172.16.10.22:5443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        server 172.16.10.23:5443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen        0.0.0.0:6443&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        proxy_pass    kube_apiserver&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        proxy_timeout 10m&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        proxy_connect_timeout 1s&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;kube-apiserver-proxy.service&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes apiserver docker wrapper
&lt;span class=&quot;nv&quot;&gt;Wants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.socket
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.service

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root
&lt;span class=&quot;nv&quot;&gt;PermissionsStartOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 6443:6443 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /etc/kubernetes/apiserver-proxy.conf:/etc/nginx/nginx.conf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; kube-apiserver-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on-failure:5 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;--memory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512M &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                          nginx:1.17.6-alpine
&lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-/usr/bin/docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; kube-apiserver-proxy
&lt;span class=&quot;nv&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; kube-apiserver-proxy
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15s
&lt;span class=&quot;nv&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30s

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动 nginx 代理(每台机器都要启动，包括 master 节点)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;apiserver-proxy.conf /etc/kubernetes
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;kube-apiserver-proxy.service /lib/systemd/system
systemctl daemon-reload
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-apiserver-proxy.service &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; systemctl start kube-apiserver-proxy.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;53启动-control-plane&quot;&gt;5.3、启动 control plane&lt;/h3&gt;

&lt;h4 id=&quot;531关于-swap&quot;&gt;5.3.1、关于 Swap&lt;/h4&gt;

&lt;p&gt;目前 kubelet 为了保证内存 limit，需要在每个节点上关闭 swap；但是说实话我看了这篇文章 &lt;a href=&quot;https://chrisdown.name/2018/01/02/in-defence-of-swap.html&quot;&gt;In defence of swap: common misconceptions&lt;/a&gt; 以后还是不想关闭 swap；更确切的说其实我们生产环境比较 “富”，pod 都不 limit 内存，所以下面的部署我忽略了 swap 错误检测&lt;/p&gt;

&lt;h4 id=&quot;532kubeadm-配置&quot;&gt;5.3.2、kubeadm 配置&lt;/h4&gt;

&lt;p&gt;当前版本的 kubeadm 已经支持了完善的配置管理(当然细节部分还有待支持)，以下为我目前使用的配置，相关位置已经做了注释，更具体的配置自行查阅官方文档&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kubeadm.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeadm.k8s.io/v1beta2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;InitConfiguration&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;localAPIEndpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 第一个 master 节点 IP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;advertiseAddress&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;172.16.10.21&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 6443 留给了 nginx，apiserver 换到 5443&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bindPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5443&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 这个 token 使用以下命令生成&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# kubeadm alpha certs certificate-key&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;certificateKey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3&lt;/span&gt; 
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeadm.k8s.io/v1beta2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterConfiguration&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 使用外部 etcd 配置&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;etcd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;external&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;endpoints&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://172.16.10.21:2379&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://172.16.10.22:2379&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://172.16.10.23:2379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;caFile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/etcd/ssl/etcd-root-ca.pem&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;certFile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/etcd/ssl/etcd.pem&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;keyFile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/etcd/ssl/etcd-key.pem&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 网络配置&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;networking&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;serviceSubnet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.25.0.0/16&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;podSubnet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.30.0.1/16&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dnsDomain&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cluster.local&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kubernetesVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;v1.17.0&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 全局 apiserver LB 地址，由于采用了 nginx 负载，所以直接指向本地既可&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;controlPlaneEndpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;127.0.0.1:6443&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiServer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# apiserver 的自定义扩展参数&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;extraArgs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;alsologtostderr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 审计日志相关配置&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;audit-log-maxage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;20&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;audit-log-maxbackup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;audit-log-maxsize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;audit-log-path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/kube-audit/audit.log&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;audit-policy-file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/kubernetes/audit-policy.yaml&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;authorization-mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Node,RBAC&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;event-ttl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;720h&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runtime-config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;api/all=true&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service-node-port-range&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30000-50000&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;service-cluster-ip-range&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.25.0.0/16&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 由于自行定义了审计日志配置，所以需要将宿主机上的审计配置&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 挂载到 kube-apiserver 的 pod 容器中&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;extraVolumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;audit-config&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/kubernetes/audit-policy.yaml&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/kubernetes/audit-policy.yaml&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pathType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;File&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;audit-log&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/kube-audit&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/kube-audit&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pathType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DirectoryOrCreate&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 这里是 apiserver 的证书地址配置&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 为了防止以后出特殊情况，我增加了一个泛域名&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;certSANs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*.kubernetes.node&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;172.16.10.21&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;172.16.10.22&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;172.16.10.23&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;timeoutForControlPlane&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5m&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;controllerManager&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;extraArgs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 宿主机 ip 掩码&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;node-cidr-mask-size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;19&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;deployment-controller-sync-period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10s&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;experimental-cluster-signing-duration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;87600h&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;node-monitor-grace-period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;20s&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pod-eviction-timeout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2m&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;terminated-pod-gc-threshold&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;scheduler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;extraArgs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;certificatesDir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/kubernetes/pki&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# gcr.io 被墙，换成微软的镜像地址&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;imageRepository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gcr.azk8s.cn/google_containers&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;clusterName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kuberentes&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubelet.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;KubeletConfiguration&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# kubelet specific options here&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 此配置保证了 kubelet 能在 swap 开启的情况下启动&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;failSwapOn&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;nodeStatusUpdateFrequency&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 一些驱逐阀值，具体自行查文档修改&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;evictionSoft&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;imagefs.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;15%&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;memory.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;512Mi&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nodefs.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;15%&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nodefs.inodesFree&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10%&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;evictionSoftGracePeriod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;imagefs.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3m&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;memory.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1m&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nodefs.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3m&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nodefs.inodesFree&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1m&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;evictionHard&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;imagefs.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10%&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;memory.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;256Mi&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nodefs.available&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10%&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nodefs.inodesFree&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5%&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;evictionMaxPodGracePeriod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;imageGCLowThresholdPercent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;70&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;imageGCHighThresholdPercent&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kubeReserved&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;cpu&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;500m&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;memory&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;512Mi&quot;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ephemeral-storage&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1Gi&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rotateCertificates&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeproxy.config.k8s.io/v1alpha1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;KubeProxyConfiguration&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# kube-proxy specific options here&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;clusterCIDR&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10.30.0.1/16&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 启用 ipvs 模式&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ipvs&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ipvs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;minSyncPeriod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;syncPeriod&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ipvs 负载策略&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;scheduler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;wrr&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;关于这个配置配置文件的文档还是很不完善，对于不懂 golang 的人来说很难知道具体怎么配置，以下做一下简要说明(请确保你已经拉取了 kubernetes 源码和安装了 Goland)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kubeadm 配置中每个配置段都会有个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kind&lt;/code&gt; 字段，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kind&lt;/code&gt; 实际上对应了 go 代码中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt; 结构体；同时从 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apiVersion&lt;/code&gt; 字段中能够看到具体的版本，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1alpha1&lt;/code&gt; 等；有了这两个信息事实上你就可以直接在源码中去找到对应的结构体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/dwo5h.png&quot; alt=&quot;struct_search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在结构体中所有的配置便可以一目了然&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.oss.link/markdown/0jc9b.png&quot; alt=&quot;struct_detail&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关于数据类型，如果是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt; 的类型，那么意味着你要在 yaml 里写 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;xxxx&quot;&lt;/code&gt; 带引号这种，当然有些时候不写能兼容，有些时候不行比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extraArgs&lt;/code&gt; 字段是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map[string]string&lt;/code&gt; 如果 value 不带引号就报错；&lt;strong&gt;如果数据类型为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metav1.Duration&lt;/code&gt;(实际上就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time.Duration&lt;/code&gt;)，那么你看着它是个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int64&lt;/code&gt; 但实际上你要写 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1h2m3s&lt;/code&gt; 这种人类可读的格式，这是 go 的特色…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;audit-policy.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Log all requests at the Metadata level.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;audit.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Policy&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Metadata&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可能 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Metadata&lt;/code&gt; 级别的审计日志比较多，想自行调整审计日志级别的可以参考&lt;a href=&quot;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#audit-policy&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;533拉起-control-plane&quot;&gt;5.3.3、拉起 control plane&lt;/h4&gt;

&lt;p&gt;有了完整的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm.yaml&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audit-policy.yaml&lt;/code&gt; 配置后，直接一条命令拉起 control plane 既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 先将审计配置放到目标位置(3 台 master 都要执行)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;audit-policy.yaml /etc/kubernetes
&lt;span class=&quot;c&quot;&gt;# 拉起 control plane&lt;/span&gt;
kubeadm init &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; kubeadm.yaml &lt;span class=&quot;nt&quot;&gt;--upload-certs&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ignore-preflight-errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Swap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;control plane 拉起以后注意要保存屏幕输出，方便后续添加其他集群节点&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube
  &lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
  &lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config

You should now deploy a pod network to the cluster.
Run &lt;span class=&quot;s2&quot;&gt;&quot;kubectl apply -f [podnetwork].yaml&quot;&lt;/span&gt; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;any number of the control-plane node running the following &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;on each as root:

  kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;127.0.0.1:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; r4t3l3.14mmuivm7xbtaeoj &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--control-plane&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--certificate-key&lt;/span&gt; 7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;two hours&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; If necessary, you can use
&lt;span class=&quot;s2&quot;&gt;&quot;kubeadm init phase upload-certs --upload-certs&quot;&lt;/span&gt; to reload certs afterward.

Then you can &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;any number of worker nodes by running the following on each as root:

kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;127.0.0.1:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; r4t3l3.14mmuivm7xbtaeoj &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;根据屏幕提示配置 kubectl&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube
&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;54部署-cni&quot;&gt;5.4、部署 CNI&lt;/h3&gt;

&lt;p&gt;关于网络插件的选择，以前一直喜欢 Calico，因为其性能确实好；到后来 flannel 出了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host-gw&lt;/code&gt; 以后现在两者性能也差不多了；但是 &lt;strong&gt;flannel 好处是一个工具通吃所有环境(云环境+裸机2层直通)，坏处是 flannel 缺乏比较好的策略管理(当然可以使用两者结合的 Canal)；&lt;/strong&gt;后来思来想去其实我们生产倒是很少需要策略管理，所以这回怂回到 flannel 了(逃…)&lt;/p&gt;

&lt;p&gt;Flannel 部署非常简单，根据官方文档下载配置，根据情况调整 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;backend&lt;/code&gt; 和 pod 的 CIDR，然后 apply 一下既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载配置文件&lt;/span&gt;
wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml

&lt;span class=&quot;c&quot;&gt;# 调整 backend 为 host-gw(测试环境 2 层直连)&lt;/span&gt;
k1.node ➜  &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 35 ConfigMap kube-flannel.yml
kind: ConfigMap
apiVersion: v1
metadata:
  name: kube-flannel-cfg
  namespace: kube-system
  labels:
    tier: node
    app: flannel
data:
  cni-conf.json: |
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;cbr0&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;cniVersion&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0.3.1&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;flannel&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;delegate&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;hairpinMode&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
            &lt;span class=&quot;s2&quot;&gt;&quot;isDefaultGateway&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;portmap&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;capabilities&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;portMappings&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  net-conf.json: |
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;Network&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;10.30.0.0/16&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;Backend&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;Type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;host-gw&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 调整完成后 apply 一下&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; kube-flannel.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;55启动其他-control-plane&quot;&gt;5.5、启动其他 control plane&lt;/h3&gt;

&lt;p&gt;为了保证 HA 架构，还需要在另外两台 master 上启动 control plane；&lt;strong&gt;在启动之前请确保另外两台 master 节点节点上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/kubernetes/audit-policy.yaml&lt;/code&gt; 审计配置已经分发完成，确保 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1:6443&lt;/code&gt; 上监听的 4 层 LB 工作正常(可尝试使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -k https://127.0.0.1:6443&lt;/code&gt; 测试)；&lt;/strong&gt;根据第一个 control plane 终端输出，其他 control plane 加入命令如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;127.0.0.1:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; r4t3l3.14mmuivm7xbtaeoj &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--control-plane&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--certificate-key&lt;/span&gt; 7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;由于在使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm join&lt;/code&gt; 时相关选项(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--discovery-token-ca-cert-hash&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--control-plane&lt;/code&gt;)无法与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--config&lt;/code&gt; 一起使用，这也就意味着我们必须增加一些附加指令来提供 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm.yaml&lt;/code&gt; 配置文件中的一些属性&lt;/strong&gt;；最终完整的 control plane 加入命令如下，在其他 master 直接执行既可(&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--apiserver-advertise-address&lt;/code&gt; 的 IP 地址是目标 master 的 IP&lt;/strong&gt;)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;127.0.0.1:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; r4t3l3.14mmuivm7xbtaeoj &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--control-plane&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--certificate-key&lt;/span&gt; 7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--apiserver-advertise-address&lt;/span&gt; 172.16.10.22 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--apiserver-bind-port&lt;/span&gt; 5443 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ignore-preflight-errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Swap 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;所有 control plane 启动完成后应当通过在每个节点上运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get cs&lt;/code&gt; 验证各个组件运行状态&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;k2.node ➜ kubectl get cs
NAME                 STATUS    MESSAGE             ERROR
scheduler            Healthy   ok
controller-manager   Healthy   ok
etcd-1               Healthy   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;health&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
etcd-0               Healthy   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;health&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
etcd-2               Healthy   &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;health&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

k2.node ➜ kubectl get node &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
NAME      STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
k1.node   Ready    master   28m   v1.17.0   172.16.10.21   &amp;lt;none&amp;gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5
k2.node   Ready    master   10m   v1.17.0   172.16.10.22   &amp;lt;none&amp;gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5
k3.node   Ready    master   3m    v1.17.0   172.16.10.23   &amp;lt;none&amp;gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;56启动-node&quot;&gt;5.6、启动 Node&lt;/h3&gt;

&lt;p&gt;node 节点的启动相较于 master 来说要简单得多，只需要增加一个防止 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swap&lt;/code&gt; 开启拒绝启动的参数既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;127.0.0.1:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; r4t3l3.14mmuivm7xbtaeoj &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--ignore-preflight-errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Swap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动成功后在 master 上可以看到所有 node 信息&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;k1.node ➜ kubectl get node &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
NAME      STATUS   ROLES    AGE     VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
k1.node   Ready    master   32m     v1.17.0   172.16.10.21   &amp;lt;none&amp;gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5
k2.node   Ready    master   14m     v1.17.0   172.16.10.22   &amp;lt;none&amp;gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5
k3.node   Ready    master   6m35s   v1.17.0   172.16.10.23   &amp;lt;none&amp;gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5
k4.node   Ready    &amp;lt;none&amp;gt;   72s     v1.17.0   172.16.10.24   &amp;lt;none&amp;gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5
k5.node   Ready    &amp;lt;none&amp;gt;   66s     v1.17.0   172.16.10.25   &amp;lt;none&amp;gt;        Ubuntu 18.04.3 LTS   4.15.0-74-generic   docker://19.3.5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;57调整及测试&quot;&gt;5.7、调整及测试&lt;/h3&gt;

&lt;p&gt;集群搭建好以后，如果想让 master 节点也参与调度任务，需要在任意一台 master 节点执行以下命令&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# node 节点报错属于正常情况&lt;/span&gt;
k1.node ➜ kubectl taint nodes &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; node-role.kubernetes.io/master-
node/k1.node untainted
node/k2.node untainted
node/k3.node untainted
taint &lt;span class=&quot;s2&quot;&gt;&quot;node-role.kubernetes.io/master&quot;&lt;/span&gt; not found
taint &lt;span class=&quot;s2&quot;&gt;&quot;node-role.kubernetes.io/master&quot;&lt;/span&gt; not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后创建一个 deployment 和一个 service，并在不同主机上 ping pod IP 测试网络联通性，在 pod 内直接 curl service 名称测试 dns 解析既可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;test-nginx.deploy.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nginx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nginx&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:1.17.6-alpine&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;test-nginx.svc.yaml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nginx&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test-nginx&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;六后续处理&quot;&gt;六、后续处理&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;说实话使用 kubeadm 后，我更关注的是集群后续的扩展性调整是否能达到目标；搭建其实很简单，大部份时间都在测试后续调整上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;61etcd-迁移&quot;&gt;6.1、Etcd 迁移&lt;/h3&gt;

&lt;p&gt;由于我们采用的是外部的 Etcd，所以迁移起来比较简单怎么折腾都行；需要注意的是换 IP 的时候注意保证老的 3 个节点至少有一个可用，否则可能导致集群崩溃；调整完成后记得分发相关 Etcd 节点的证书，重启时顺序一个一个重启，不要并行操作&lt;/p&gt;

&lt;h3 id=&quot;62master-配置修改&quot;&gt;6.2、Master 配置修改&lt;/h3&gt;

&lt;p&gt;如果需要修改 conrol plane 上 apiserver、scheduler 等配置，直接修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm.yaml&lt;/code&gt; 配置文件(&lt;strong&gt;所以集群搭建好后务必保存好&lt;/strong&gt;)，然后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm upgrade apply --config kubeadm.yaml&lt;/code&gt; 升级集群既可，升级前一定作好相关备份工作；我只在测试环境测试这个命令工作还可以，生产环境还是需要谨慎&lt;/p&gt;

&lt;h3 id=&quot;63证书续期&quot;&gt;6.3、证书续期&lt;/h3&gt;

&lt;p&gt;目前根据我测试的结果，controller manager 的 &lt;strong&gt;experimental-cluster-signing-duration&lt;/strong&gt; 参数在 init 的签发证书阶段似乎并未生效；&lt;strong&gt;目前根据文档描述 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; client 的证书会自动滚动，其他证书默认 1 年有效期，需要自己使用命令续签；&lt;/strong&gt;续签命令如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看证书过期时间&lt;/span&gt;
k1.node ➜ kubeadm alpha certs check-expiration
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;check-expiration] Reading configuration from the cluster...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;check-expiration] FYI: You can look at this config file with &lt;span class=&quot;s1&quot;&gt;'kubectl -n kube-system get cm kubeadm-config -oyaml'&lt;/span&gt;

CERTIFICATE                EXPIRES                  RESIDUAL TIME   CERTIFICATE AUTHORITY   EXTERNALLY MANAGED
admin.conf                 Jan 11, 2021 10:06 UTC   364d                                    no
apiserver                  Jan 11, 2021 10:06 UTC   364d            ca                      no
apiserver-kubelet-client   Jan 11, 2021 10:06 UTC   364d            ca                      no
controller-manager.conf    Jan 11, 2021 10:06 UTC   364d                                    no
front-proxy-client         Jan 11, 2021 10:06 UTC   364d            front-proxy-ca          no
scheduler.conf             Jan 11, 2021 10:06 UTC   364d                                    no

CERTIFICATE AUTHORITY   EXPIRES                  RESIDUAL TIME   EXTERNALLY MANAGED
ca                      Jan 09, 2030 10:06 UTC   9y              no
front-proxy-ca          Jan 09, 2030 10:06 UTC   9y              no

&lt;span class=&quot;c&quot;&gt;# 续签证书&lt;/span&gt;
k1.node ➜ kubeadm alpha certs renew all
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;renew] Reading configuration from the cluster...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;renew] FYI: You can look at this config file with &lt;span class=&quot;s1&quot;&gt;'kubectl -n kube-system get cm kubeadm-config -oyaml'&lt;/span&gt;

certificate embedded &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the kubeconfig file &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the admin to use and &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;kubeadm itself renewed
certificate &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;serving the Kubernetes API renewed
certificate &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the API server to connect to kubelet renewed
certificate embedded &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the kubeconfig file &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the controller manager to use renewed
certificate &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the front proxy client renewed
certificate embedded &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the kubeconfig file &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the scheduler manager to use renewed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;64node-重加入&quot;&gt;6.4、Node 重加入&lt;/h3&gt;

&lt;p&gt;默认的 bootstrap token 会在 24h 后失效，所以后续增加新节点需要重新创建 token，重新创建 token 可以通过以下命令完成&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 列出 token&lt;/span&gt;
k1.node ➜ kubeadm token list
TOKEN                     TTL         EXPIRES                     USAGES                   DESCRIPTION                                                EXTRA GROUPS
r4t3l3.14mmuivm7xbtaeoj   22h         2020-01-13T18:06:54+08:00   authentication,signing   &amp;lt;none&amp;gt;                                                     system:bootstrappers:kubeadm:default-node-token
zady4i.57f9i2o6zl9vf9hy   45m         2020-01-12T20:06:53+08:00   &amp;lt;none&amp;gt;                   Proxy &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;managing TTL &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the kubeadm-certs secret        &amp;lt;none&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 创建新 token&lt;/span&gt;
k1.node ➜ kubeadm token create &lt;span class=&quot;nt&quot;&gt;--print-join-command&lt;/span&gt;
W0112 19:21:15.174765   26626 validation.go:28] Cannot validate kube-proxy config - no validator is available
W0112 19:21:15.174836   26626 validation.go:28] Cannot validate kubelet config - no validator is available
kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;127.0.0.1:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; 2dz4dc.mobzgjbvu0bkxz7j     &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:06f49f1f29d08b797fbf04d87b9b0fd6095a4693e9b1d59c429745cfa082b31d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果忘记了 certificate-key 可以通过一下命令重新 upload 并查看&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;k1.node ➜ kubeadm init &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; kubeadm.yaml phase upload-certs &lt;span class=&quot;nt&quot;&gt;--upload-certs&lt;/span&gt;
W0112 19:23:06.466711   28637 validation.go:28] Cannot validate kubelet config - no validator is available
W0112 19:23:06.466778   28637 validation.go:28] Cannot validate kube-proxy config - no validator is available
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;upload-certs] Storing the certificates &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Secret &lt;span class=&quot;s2&quot;&gt;&quot;kubeadm-certs&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the &lt;span class=&quot;s2&quot;&gt;&quot;kube-system&quot;&lt;/span&gt; Namespace
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;upload-certs] Using certificate key:
7373f829c733b46fb78f0069f90185e0f00254381641d8d5a7c5984b2cf17cd3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;65调整-kubelet&quot;&gt;6.5、调整 kubelet&lt;/h3&gt;

&lt;p&gt;node 节点一旦启动完成后，kubelet 配置便不可再修改；如果想要修改 kubelet 配置，可以通过调整 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/systemd/system/kubelet.service.d/10-kubeadm.conf&lt;/code&gt; 配置文件完成&lt;/p&gt;

&lt;h2 id=&quot;七其他&quot;&gt;七、其他&lt;/h2&gt;

&lt;p&gt;本文参考了许多官方文档，以下是一些个人认为比较有价值并且在使用 kubeadm 后应该阅读的文档&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/reference/setup-tools/kubeadm/implementation-details&quot;&gt;Implementation details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/kubelet-integration/&quot;&gt;Configuring each kubelet in your cluster using kubeadm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/control-plane-flags/&quot;&gt;Customizing control plane configuration with kubeadm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/&quot;&gt;Creating Highly Available clusters with kubeadm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/&quot;&gt;Certificate Management with kubeadm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/&quot;&gt;Upgrading kubeadm clusters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/&quot;&gt;Reconfigure a Node’s Kubelet in a Live Cluster&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jan 2020 21:31:39 +0800</pubDate>
        <link>https://mritd.me/2020/01/21/set-up-kuberntes-ha-cluster-by-kubeadm/</link>
        <guid isPermaLink="true">https://mritd.me/2020/01/21/set-up-kuberntes-ha-cluster-by-kubeadm/</guid>
        
        <category>Kubernetes</category>
        
        
        <category>Kubernetes</category>
        
      </item>
    
      <item>
        <title>云服务器下 Ubuntu 18 正确的 DNS 修改</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;最近博客服务器换成了阿里云香港，个人还偶尔看美剧，所以做了一下 Netflix 分流；分流过程主要是做 DNS 解析 SNI 代理，调了半天记录一下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一起因&quot;&gt;一、起因&lt;/h2&gt;

&lt;p&gt;Netflix DNS 分流实际上我目前的方案是通过 CoreDNS 作为主 DNS Server，然后在 CoreDNS 上针对 Netflix 全部域名解析 forward 到一台国外可以解锁 Netflix 机器上；如果直接将 CoreDNS 暴露在公网，那么无疑是在作死，为 DNS 反射 DDos 提供肉鸡；所以想到的方案是自己编写一个不可描述的工具，本地 Client 到 Server 端以后，Server 端再去设置到 CoreDNS 做分流；其中不可避免的需要调整 Server 端默认 DNS。&lt;/p&gt;

&lt;h2 id=&quot;二已废弃修改方式&quot;&gt;二、已废弃修改方式&lt;/h2&gt;

&lt;p&gt;目前大部份人还是习惯修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/resolv.conf&lt;/code&gt; 配置文件，这个配置文件上面已经明确标注了不要去修改它；&lt;strong&gt;因为自 Systemd 一统江山以后，系统 DNS 已经被 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-resolved&lt;/code&gt; 服务接管；一但修改了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/resolv.conf&lt;/code&gt;，机器重启后就会被恢复；&lt;/strong&gt;所以根源解决方案还是需要修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-resolved&lt;/code&gt; 的配置。&lt;/p&gt;

&lt;h2 id=&quot;三netplan-的调整&quot;&gt;三、netplan 的调整&lt;/h2&gt;

&lt;p&gt;在调整完 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-resolved&lt;/code&gt; 配置后其实有些地方仍然是不生效的；&lt;strong&gt;原因是 Ubuntu 18 开始网络已经被 netplan 接管，所以问题又回到了如何修改 netplan；&lt;/strong&gt;由于云服务器初始化全部是由 cloud-init 完成的，netplan 配置里 IP 全部是由 DHCP 完成；那么直接修改 netplan 为 static IP 理论上可行，但是事实上还是不够优雅；后来研究了一下其实更优雅的方式是覆盖掉 DHCP 的某些配置，比如 DNS 配置；在阿里云上配置如下(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/netplan/99-netcfg.yaml&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;networkd&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ethernets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;eth0&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dhcp4&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dhcp4-overrides&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;use-dns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dhcp6&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;no&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;nameservers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 我自己的 CoreDNS 服务器&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;172.17.3.17&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改完成后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netplan try&lt;/code&gt; 等待几秒钟，如果屏幕的读秒倒计时一直在动，说明修改没问题，接着回车既可(尽量不要 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;netplan apply&lt;/code&gt;，一旦修改错误你就再也连不上了…)&lt;/p&gt;

&lt;h2 id=&quot;四dns-分流&quot;&gt;四、DNS 分流&lt;/h2&gt;

&lt;p&gt;顺便贴一下 CoreDNS 配置吧，可能有些人也需要；第一部分的域名是目前我整理的 Netflix 全部访问域名，针对这些域名的流量转发到自己其他可解锁 Netflix 的机器既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netflix.com nflxext.com nflximg.net nflxso.net nflxvideo.net &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;bind &lt;/span&gt;172.17.3.17

    cache 30 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        success 4096
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    forward &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 158.1.1.1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        max_fails 2
        prefer_udp
        expire 20s
        policy random
        health_check 0.2s
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    errors
    log &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{remote}:{port} - {&amp;gt;id} &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{type} {class} {name} {proto} {size} {&amp;gt;do} {&amp;gt;bufsize}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {rcode} {&amp;gt;rflags} {rsize} {duration}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

.:53 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;bind &lt;/span&gt;172.17.3.17

    cache 30 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        success 4096
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    forward &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 8.8.8.8 1.1.1.1 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        except netflix.com nflxext.com nflximg.net nflxso.net nflxvideo.net
        max_fails 2
        expire 20s
        policy random
        health_check 0.2s
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    errors
    log &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{remote}:{port} - {&amp;gt;id} &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{type} {class} {name} {proto} {size} {&amp;gt;do} {&amp;gt;bufsize}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; {rcode} {&amp;gt;rflags} {rsize} {duration}&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;五关于-docker&quot;&gt;五、关于 docker&lt;/h2&gt;

&lt;p&gt;当 netplan 修改完成后，只需要重启 docker 既可保证 docker 内所有容器 DNS 请求全部发送到自己定义的 DNS 服务器上；&lt;strong&gt;请不要尝试将自己的 CoreDNS 监听到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.*&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::1&lt;/code&gt; 上，这两个地址会导致 docker 中的 DNS 无效&lt;/strong&gt;，因为在 &lt;a href=&quot;https://github.com/docker/libnetwork/blob/fec6476dfa21380bf8ee4d74048515d968c1ee63/resolvconf/resolvconf.go#L148&quot;&gt;libnetwork&lt;/a&gt; 中针对这两个地址做了过滤，并且 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FilterResolvDNS&lt;/code&gt; 方法在剔除这两种地址时不会给予任何警告日志&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jan 2020 21:20:08 +0800</pubDate>
        <link>https://mritd.me/2020/01/21/how-to-modify-dns-on-ubuntu18-server/</link>
        <guid isPermaLink="true">https://mritd.me/2020/01/21/how-to-modify-dns-on-ubuntu18-server/</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Percona MySQL 搭建</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;最近被拉去折腾 MySQL 了，Kuberntes 相关的文章停更了好久… MySQL 折腾完了顺便记录一下折腾过程，值得注意的是本篇文章从实际生产环境文档中摘录，部分日志和数据库敏感信息已被胡乱替换，所以不要盲目复制粘贴。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一版本信息&quot;&gt;一、版本信息&lt;/h2&gt;

&lt;p&gt;目前采用 MySQL fork 版本 Percona Server 5.7.28，监控方面选择 Percona Monitoring and Management 2.1.0，对应监控 Client 版本为 2.1.0&lt;/p&gt;

&lt;h2 id=&quot;二percona-server-安装&quot;&gt;二、Percona Server 安装&lt;/h2&gt;

&lt;p&gt;为保证兼容以及稳定性，MySQL 宿主机系统选择 CentOS 7，Percona Server 安装方式为 rpm 包，安装后由 Systemd 守护&lt;/p&gt;

&lt;h3 id=&quot;21下载安装包&quot;&gt;2.1、下载安装包&lt;/h3&gt;

&lt;p&gt;安装包下载地址为 &lt;a href=&quot;https://www.percona.com/downloads/Percona-Server-5.7/LATEST/&quot;&gt;https://www.percona.com/downloads/Percona-Server-5.7/LATEST/&lt;/a&gt;，下载时选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Download All Packages Together&lt;/code&gt;，下载后是所有组件全量的压缩 tar 包。&lt;/p&gt;

&lt;h3 id=&quot;22安装前准备&quot;&gt;2.2、安装前准备&lt;/h3&gt;

&lt;p&gt;针对 CentOS 7 系统，安装前升级所有系统组件库，执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum update&lt;/code&gt; 既可；大部份 &lt;strong&gt;CentOS 7 安装后可能会附带 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mariadb-libs&lt;/code&gt; 包，这个包会默认创建一些配置文件，导致后面的 Percona Server 无法覆盖它(例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/my.cnf&lt;/code&gt;)，所以安装 Percona Server 之前需要卸载它 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum remove mariadb-libs&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;针对于数据存储硬盘，目前统一为 SSD 硬盘，挂载点为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data&lt;/code&gt;，挂载方式可以采用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fstab&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-mount&lt;/code&gt;，分区格式目前采用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xfs&lt;/code&gt; 格式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SSD 优化有待补充…&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;23安装-percona-server&quot;&gt;2.3、安装 Percona Server&lt;/h3&gt;

&lt;p&gt;Percona Server tar 包解压后会有 9 个 rpm 包，实际安装时只需要安装其中 4 个既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Percona-Server-client-57-5.7.28-31.1.el7.x86_64.rpm Percona-Server-server-57-5.7.28-31.1.el7.x86_64.rpm Percona-Server-shared-57-5.7.28-31.1.el7.x86_64.rpm Percona-Server-shared-compat-57-5.7.28-31.1.el7.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;24安装后调整&quot;&gt;2.4、安装后调整&lt;/h3&gt;

&lt;h4 id=&quot;241硬盘调整&quot;&gt;2.4.1、硬盘调整&lt;/h4&gt;

&lt;p&gt;目前 MySQL 数据会统一存放到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data&lt;/code&gt; 目录下，所以需要将单独的数据盘挂载到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data&lt;/code&gt; 目录；&lt;strong&gt;如果是 SSD 硬盘还需要调整系统 I/O 调度器等其他优化。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;242目录预创建&quot;&gt;2.4.2、目录预创建&lt;/h4&gt;

&lt;p&gt;Percona Server 安装完成后，由于配置调整原因，还会用到一些其他的数据目录，这些目录可以预先创建并授权&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/log/mysql /data/mysql_tmp
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; mysql:mysql /var/log/mysql /data/mysql_tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/log/mysql&lt;/code&gt; 目录用来存放 MySQL 相关的日志(不包括 binlog)，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/data/mysql_tmp&lt;/code&gt; 用来存放 MySQL 运行时产生的缓存文件。&lt;/p&gt;

&lt;h4 id=&quot;243文件描述符调整&quot;&gt;2.4.3、文件描述符调整&lt;/h4&gt;

&lt;p&gt;由于 rpm 安装的 Percona Server 会采用 Systemd 守护，所以如果想修改文件描述符配置应当调整 Systemd 配置文件&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /usr/lib/systemd/system/mysqld.service

&lt;span class=&quot;c&quot;&gt;# Sets open_files_limit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 注意 infinity = 65536&lt;/span&gt;
LimitCORE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; infinity
LimitNOFILE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; infinity
LimitNPROC &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; infinity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl daemon-reload&lt;/code&gt; 重载既可。&lt;/p&gt;

&lt;h4 id=&quot;244配置文件调整&quot;&gt;2.4.4、配置文件调整&lt;/h4&gt;

&lt;p&gt;Percona Server 安装完成后也会生成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/my.cnf&lt;/code&gt; 配置文件，不过不建议直接修改该文件；修改配置文件需要进入到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/percona-server.conf.d/&lt;/code&gt; 目录调整相应配置；以下为配置样例(&lt;strong&gt;生产环境 mysqld 配置需要优化调整&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysql.cnf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[mysql]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;auto-rehash&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;default_character_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf8mb4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysqld.cnf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Percona Server template configuration
&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;[mysqld]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#
# Remove leading # and set to the amount of RAM for the most important data
# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
# innodb_buffer_pool_size = 128M
#
# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
# log_bin
#
# Remove leading # to set options mainly useful for reporting servers.
# The server defaults are faster for transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
# join_buffer_size = 128M
# sort_buffer_size = 2M
# read_rnd_buffer_size = 2M
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;datadir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/data/mysql&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/data/mysql/mysql.sock&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;pid_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/data/mysql/mysqld.pid&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 服务端编码
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;character_set_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf8mb4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 服务端排序
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;collation_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf8mb4_general_ci&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 强制使用 utf8mb4 编码集，忽略客户端设置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;skip_character_set_client_handshake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 日志输出到文件
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;FILE&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 开启常规日志输出
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;general_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 常规日志输出文件位置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;general_log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/mysql/mysqld.log&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 错误日志位置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/mysql/mysqld-error.log&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 记录慢查询
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;slow_query_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 慢查询时间(大于 1s 被视为慢查询)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;long_query_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 慢查询日志文件位置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;slow_query_log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/mysql/mysqld-slow.log&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 临时文件位置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;tmpdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/data/mysql_tmp&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 线程池缓存(refs https://my.oschina.net/realfighter/blog/363853)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;thread_cache_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The number of open tables for all threads.(refs https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_table_open_cache)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;table_open_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16384&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 文件描述符(此处修改不生效，请修改 systemd service 配置) 
# refs https://www.percona.com/blog/2017/10/12/open_files_limit-mystery/
# refs https://www.cnblogs.com/wxxjianchi/p/10370419.html
#open_files_limit=65535
# 表定义缓存(5.7 以后自动调整)
# refs https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_table_definition_cache
# refs http://mysql.taobao.org/monthly/2015/08/10/
#table_definition_cache=16384
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sort_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1M&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;join_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MyiSAM 引擎专用(内部临时磁盘表可能会用)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;read_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1M&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;read_rnd_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MyiSAM 引擎专用(内部临时磁盘表可能会用)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;key_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;32M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MyiSAM 引擎专用(内部临时磁盘表可能会用)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;bulk_insert_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# myisam_sort_buffer_size 与 sort_buffer_size 区别请参考(https://stackoverflow.com/questions/7871027/myisam-sort-buffer-size-vs-sort-buffer-size)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;myisam_sort_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;64M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 内部内存临时表大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;tmp_table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;32M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 用户创建的 MEMORY 表最大大小(tmp_table_size 受此值影响)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_heap_table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;32M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 开启查询缓存
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;query_cache_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 查询缓存大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;query_cache_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;32M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sql mode
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sql_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;########### Network ###########
# 最大连接数(该参数受到最大文件描述符影响，如果不生效请检查最大文件描述符设置)
# refs https://stackoverflow.com/questions/39976756/the-max-connections-in-mysql-5-7
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1500&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mysql 堆栈内暂存的链接数量
# 当短时间内链接数量超过 max_connections 时，部分链接会存储在堆栈内，存储数量受此参数控制
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;back_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 最大链接错误，针对于 client 主机，超过此数量的链接错误将会导致 mysql server 针对此主机执行锁定(禁止链接 ERROR 1129 )
# 此错误计数仅在 mysql 链接握手失败才会计算，一般出现问题时都是网络故障
# refs https://www.cnblogs.com/kerrycode/p/8405862.html
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_connect_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100000&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mysql server 允许的最大数据包大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_allowed_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;64M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 交互式客户端链接超时(30分钟自动断开)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;interactive_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1800&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 非交互式链接超时时间(10分钟)
# 如果客户端有连接池，则需要协商此参数(refs https://database.51cto.com/art/201909/603519.htm)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;wait_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;600&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 跳过外部文件系统锁定
# If you run multiple servers that use the same database directory (not recommended), 
# each server must have external locking enabled.
# refs https://dev.mysql.com/doc/refman/5.7/en/external-locking.html
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;skip_external_locking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 跳过链接的域名解析(开启此选项后 mysql 用户授权的 host 方式失效)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;skip_name_resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 禁用主机名缓存，每次都会走 DNS
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;host_cache_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;########### REPL ###########
# 开启 binlog
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log_bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 作为从库时，同步信息依然写入 binlog，方便此从库再作为其他从库的主库
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log_slave_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# server id，默认为 ipv4 地址去除第一段
# eg: 172.16.10.11 =&amp;gt; 161011
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;server_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;161011&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 每次次事务 binlog 刷新到磁盘
# refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sync_binlog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binlog 格式(refs https://zhuanlan.zhihu.com/p/33504555)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;binlog_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;row&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binlog 自动清理时间
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;expire_logs_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 开启 relay-log，一般作为 slave 时开启
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;relay_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-replay&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 主从复制时跳过 test 库
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;replicate_ignore_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 每个 session binlog 缓存
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;binlog_cache_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binlog 滚动大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_binlog_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1024M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# GTID 相关(refs https://keithlan.github.io/2016/06/23/gtid/)
#gtid_mode=1
#enforce_gtid_consistency=1
&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;########### InnoDB ###########
# 永久表默认存储引擎
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;default_storage_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;InnoDB&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 系统表空间数据文件大小(初始化为 1G，并且自动增长)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_data_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ibdata1:1G:autoextend&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 缓存池大小
# innodb_buffer_pool_size 必须等于 innodb_buffer_pool_chunk_size*innodb_buffer_pool_instances，或者是其整数倍
# refs https://dev.mysql.com/doc/refman/5.7/en/innodb-buffer-pool-resize.html
# refs https://zhuanlan.zhihu.com/p/60089484
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;7680M&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_chunk_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;128M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 强制恢复(refs https://www.askmaclean.com/archives/mysql-innodb-innodb_force_recovery.html)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_force_recovery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB buffer 预热(refs http://www.dbhelp.net/2017/01/12/mysql-innodb-buffer-pool-warmup.html)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_dump_at_shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_load_at_startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 日志组中的日志文件数
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_log_files_in_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB redo 日志大小
# refs https://www.percona.com/blog/2017/10/18/chose-mysql-innodb_log_file_size/
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_log_file_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;256MB&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 缓存还未提交的事务的缓冲区大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_log_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 在事务提交后的日志写入频率
# refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_flush_log_at_trx_commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB DML 操作行级锁等待时间
# 超时返回 ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
# refs https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_lock_wait_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 行级锁超时是否回滚整个事务，默认为 OFF 仅回滚上一条语句
# 此时应用程序可以接受到错误后选择是否继续提交事务(并没有违反 ACID 原子性)
# refs https://www.cnblogs.com/hustcat/archive/2012/11/18/2775487.html
#innodb_rollback_on_timeout=ON
# InnoDB 数据写入磁盘的方式，具体见博客文章
# refs https://www.cnblogs.com/gomysql/p/3595806.html
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_flush_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;O_DIRECT&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 缓冲池脏页刷新百分比
# refs https://dbarobin.com/2015/08/29/mysql-optimization-under-ssd
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_max_dirty_pages_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 每秒执行的写IO量
# refs https://www.centos.bz/2016/11/mysql-performance-tuning-15-config-item/#10.INNODB_IO_CAPACITY,%20INNODB_IO_CAPACITY_MAX
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_io_capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;500&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;innodb_io_capacity_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 请求并发 InnoDB 线程数
# refs https://www.cnblogs.com/xinysu/p/6439715.html#_lab2_1_0
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_thread_concurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 再使用多个 InnoDB 表空间时，允许打开的最大 &quot;.ibd&quot; 文件个数，不设置默认 300，
# 并且取与 table_open_cache 相比较大的一个，此选项独立于 open_files_limit
# refs https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_open_files
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_open_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;65535&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 每个 InnoDB 表都存储在独立的表空间(.ibd)中
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_file_per_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 事务级别(可重复读，会出幻读)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;transaction_isolation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;REPEATABLE-READ&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 是否在搜索和索引扫描中使用间隙锁(gap locking)，不建议使用未来将删除
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_locks_unsafe_for_binlog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 后台清理线程数，更大的值有助于 DML 执行性能，&amp;gt;= 5.7.8 默认为 4
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_purge_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysqld_safe.cnf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#
# The Percona Server 5.7 configuration file.
#
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html
&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;[mysqld_safe]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;pid-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/mysqld/mysqld.pid&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;socket&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/mysqld/mysqld.sock&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;nice&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysqldump.cnf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[mysqldump]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;quick&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;default-character-set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf8mb4&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;max_allowed_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;256M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;25启动&quot;&gt;2.5、启动&lt;/h3&gt;

&lt;p&gt;配置文件调整完成后启动既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start mysqld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动完成后默认 root 密码会自动生成，通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep 'temporary password' /var/log/mysql/*&lt;/code&gt; 查看默认密码；获得默认密码后可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysqladmin -S /data/mysql/mysql.sock -u root -p password&lt;/code&gt; 修改 root 密码。&lt;/p&gt;

&lt;h2 id=&quot;三percona-monitoring-and-management&quot;&gt;三、Percona Monitoring and Management&lt;/h2&gt;

&lt;p&gt;数据库创建成功后需要增加 pmm 监控，后续将会通过监控信息来调优数据库，所以数据库监控必不可少。&lt;/p&gt;

&lt;h3 id=&quot;31安装前准备&quot;&gt;3.1、安装前准备&lt;/h3&gt;

&lt;p&gt;pmm 监控需要使用特定用户来监控数据信息，所以需要预先为 pmm 创建用户&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pmm'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pmm12345'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;32安装-pmm-server&quot;&gt;3.2、安装 PMM Server&lt;/h3&gt;

&lt;p&gt;pmm server 端推荐直接使用 docker 启动，以下为样例 docker compose&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pmm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;percona/pmm-server:2.1.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pmm&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;data:/srv&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;80:80&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;443:443&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;如果想要自定义证书，请将证书复制到 volume 内的 nginx 目录下，自定义证书需要以下证书文件&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pmmserver.node ➜ tree
&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── ca-certs.pem
├── certificate.conf  &lt;span class=&quot;c&quot;&gt;# 此文件是 pmm 默认生成自签证书的配置文件，不需要关注&lt;/span&gt;
├── certificate.crt
├── certificate.key
└── dhparam.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;pmm server 启动后访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http(s)://IP_ADDRESS&lt;/code&gt; 既可进入 granafa 面板，默认账户名和密码都是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;33安装-pmm-client&quot;&gt;3.3、安装 PMM Client&lt;/h3&gt;

&lt;p&gt;PMM Client 同样采用 rpm 安装，下载地址 &lt;a href=&quot;https://www.percona.com/downloads/pmm2/&quot;&gt;https://www.percona.com/downloads/pmm2/&lt;/a&gt;，当前采用最新的 2.1.0 版本；rpm 下载完成后直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum install&lt;/code&gt; 既可。&lt;/p&gt;

&lt;p&gt;rpm 安装完成后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pmm-admin&lt;/code&gt; 命令配置服务端地址，并添加当前 mysql 实例监控&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 配置服务端地址&lt;/span&gt;
pmm-admin config &lt;span class=&quot;nt&quot;&gt;--server-url&lt;/span&gt; https://admin:admin@pmm.mysql.node 172.16.0.11 generic mysql
&lt;span class=&quot;c&quot;&gt;# 配置当前 mysql 实例&lt;/span&gt;
pmm-admin add mysql &lt;span class=&quot;nt&quot;&gt;--username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pmm &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pmm12345 mysql 172.16.0.11:3306
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完成后稍等片刻既可在 pmm server 端的 granafa 中看到相关数据。&lt;/p&gt;

&lt;h2 id=&quot;四数据导入&quot;&gt;四、数据导入&lt;/h2&gt;

&lt;p&gt;从原始数据库 dump 相关库，并导入到新数据库既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# dump&lt;/span&gt;
mysqldump &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; 172.16.1.10 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--master-data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nt&quot;&gt;--routines&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--triggers&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--single_transaction&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--databases&lt;/span&gt; DATABASE_NAME &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; dump.sql
&lt;span class=&quot;c&quot;&gt;# load&lt;/span&gt;
mysql &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; /data/mysql/mysql.sock &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &amp;lt; dump.sql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数据导入后重建业务用户既可&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test_user'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test_user'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;五数据备份&quot;&gt;五、数据备份&lt;/h2&gt;

&lt;h3 id=&quot;51安装-xtrabackup&quot;&gt;5.1、安装 xtrabackup&lt;/h3&gt;

&lt;p&gt;目前数据备份采用 Perconra xtrabackup 工具，xtrabackup 可以实现高速、压缩带增量的备份；xtrabackup 安装同样采用 rpm 方式，下载地址为 &lt;a href=&quot;https://www.percona.com/downloads/Percona-XtraBackup-2.4/LATEST/&quot;&gt;https://www.percona.com/downloads/Percona-XtraBackup-2.4/LATEST/&lt;/a&gt;，下载完成后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yum install&lt;/code&gt; 既可&lt;/p&gt;

&lt;h3 id=&quot;52备份工具&quot;&gt;5.2、备份工具&lt;/h3&gt;

&lt;p&gt;目前备份工具开源在 &lt;a href=&quot;https://github.com/gozap/mybak&quot;&gt;GitHub&lt;/a&gt; 上，每次全量备份会写入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.full-backup&lt;/code&gt; 文件，增量备份会写入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.inc-backup&lt;/code&gt; 文件&lt;/p&gt;

&lt;h3 id=&quot;53配置-systemd&quot;&gt;5.3、配置 systemd&lt;/h3&gt;

&lt;p&gt;为了使备份自动运行，目前将定时任务配置到 systemd 中，由 systemd 调度并执行；以下为相关 systemd 配置文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysql-backup-full.service&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql full backup
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on-failure
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/mybak &lt;span class=&quot;nt&quot;&gt;--backup-dir&lt;/span&gt; /data/mysql_backup &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; mysql full

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysql-backup-inc.service&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql incremental backup
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on-failure
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/mybak &lt;span class=&quot;nt&quot;&gt;--backup-dir&lt;/span&gt; /data/mysql_backup &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; mysql inc

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysql-backup-compress.service&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql backup compress
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on-failure
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/mybak &lt;span class=&quot;nt&quot;&gt;--backup-dir&lt;/span&gt; /data/mysql_backup &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt; mysql compress &lt;span class=&quot;nt&quot;&gt;--clean&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysql-backup-full.timer&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql weekly full backup
&lt;span class=&quot;c&quot;&gt;# 备份之前依赖相关目录的挂载&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;data.mount
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;data-mysql_backup.mount

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Timer]
&lt;span class=&quot;c&quot;&gt;# 目前每周日一个全量备份&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OnCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Sun &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 3:00
&lt;span class=&quot;nv&quot;&gt;Persistent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;timers.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysql-backup-inc.timer&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql weekly full backup
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;data.mount
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;data-mysql_backup.mount

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Timer]
&lt;span class=&quot;c&quot;&gt;# 每天三个增量备份&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OnCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 9:00
&lt;span class=&quot;nv&quot;&gt;OnCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 13:00
&lt;span class=&quot;nv&quot;&gt;OnCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 18:00
&lt;span class=&quot;nv&quot;&gt;Persistent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;timers.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysql-backup-compress.timer&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql weekly backup compress
&lt;span class=&quot;c&quot;&gt;# 备份之前依赖相关目录的挂载&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;data.mount
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;data-mysql_backup.mount

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Timer]
&lt;span class=&quot;c&quot;&gt;# 目前每周日一个全量备份，自动压缩后同时完成清理&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OnCalendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Sun &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 5:00
&lt;span class=&quot;nv&quot;&gt;Persistent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;timers.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建好相关文件后启动相关定时器既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.timer &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.service /lib/systemd/system
systemctl daemon-reload
systemctl start mysql-backup-full.timer mysql-backup-inc.timer mysql-backup-compress.timer
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;mysql-backup-full.timer mysql-backup-inc.timer mysql-backup-compress.timer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;六数据恢复&quot;&gt;六、数据恢复&lt;/h2&gt;

&lt;h3 id=&quot;61全量备份恢复&quot;&gt;6.1、全量备份恢复&lt;/h3&gt;

&lt;p&gt;针对于全量备份，只需要按照官方文档的还原顺序进行还原既可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 由于备份时进行了压缩，所以先解压备份文件&lt;/span&gt;
xtrabackup &lt;span class=&quot;nt&quot;&gt;--decompress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--parallel&lt;/span&gt; 4 &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt; /data/mysql_backup/mysql-20191205230502
&lt;span class=&quot;c&quot;&gt;# 执行预处理&lt;/span&gt;
xtrabackup &lt;span class=&quot;nt&quot;&gt;--prepare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt; /data/mysql_backup/mysql-20191205230502
&lt;span class=&quot;c&quot;&gt;# 执行恢复(恢复时自动根据 my.cnf 将数据覆盖到 data 数据目录)&lt;/span&gt;
xtrabackup &lt;span class=&quot;nt&quot;&gt;--copy-back&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt; /data/mysql_backup/mysql-20191205230502
&lt;span class=&quot;c&quot;&gt;# 修复数据目录权限&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; mysql:mysql /data/mysql
&lt;span class=&quot;c&quot;&gt;# 启动 mysql&lt;/span&gt;
systemctl start mysqld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;62增量备份恢复&quot;&gt;6.2、增量备份恢复&lt;/h3&gt;

&lt;p&gt;对于增量备份恢复，其与全量备份恢复的根本区别在于: &lt;strong&gt;对于非最后一个增量文件的预处理必须使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--apply-log-only&lt;/code&gt; 选项防止运行回滚阶段的处理&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 对所有备份文件进行解压处理&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;xtrabackup &lt;span class=&quot;nt&quot;&gt;--decompress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--parallel&lt;/span&gt; 4 &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 对全量备份文件执行预处理(注意增加 --apply-log-only 选项)&lt;/span&gt;
xtrabackup &lt;span class=&quot;nt&quot;&gt;--prepare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--apply-log-only&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt; /data/mysql_backup/mysql-20191205230502
&lt;span class=&quot;c&quot;&gt;# 对非最后一个增量备份执行预处理&lt;/span&gt;
xtrabackup &lt;span class=&quot;nt&quot;&gt;--prepare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--apply-log-only&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt; /data/mysql_backup/mysql-20191205230502 &lt;span class=&quot;nt&quot;&gt;--incremental-dir&lt;/span&gt; /data/mysql_backup/mysql-inc-20191206230802
&lt;span class=&quot;c&quot;&gt;# 对最后一个增量备份执行预处理(不需要 --apply-log-only)&lt;/span&gt;
xtrabackup &lt;span class=&quot;nt&quot;&gt;--prepare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt; /data/mysql_backup/mysql-20191205230502 &lt;span class=&quot;nt&quot;&gt;--incremental-dir&lt;/span&gt; /data/mysql_backup/mysql-inc-20191207031005
&lt;span class=&quot;c&quot;&gt;# 执行恢复(恢复时自动根据 my.cnf 将数据覆盖到 data 数据目录)&lt;/span&gt;
xtrabackup &lt;span class=&quot;nt&quot;&gt;--copy-back&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt; /data/mysql_backup/mysql-20191205230502
&lt;span class=&quot;c&quot;&gt;# 修复数据目录权限&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; mysql:mysql /data/mysql
&lt;span class=&quot;c&quot;&gt;# 启动 mysql&lt;/span&gt;
systemctl start mysqld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;63创建-slave&quot;&gt;6.3、创建 slave&lt;/h3&gt;

&lt;p&gt;针对 xtrabackup 备份的数据可以直接恢复成 slave 节点，具体步骤如下:&lt;/p&gt;

&lt;p&gt;首先将备份文件复制到目标机器，然后执行解压(默认备份工具采用 lz4 压缩)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xtrabackup &lt;span class=&quot;nt&quot;&gt;--decompress&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解压完成后执行预处理操作(&lt;strong&gt;在执行预处理之前请确保 slave 机器上相关配置文件与 master 相同，并且处理好数据目录存放等&lt;/strong&gt;)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xtrabackup &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root &lt;span class=&quot;nt&quot;&gt;--password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxxxxx &lt;span class=&quot;nt&quot;&gt;--prepare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;预处理成功后便可执行恢复，以下命令将自动读取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my.cnf&lt;/code&gt; 配置，自动识别数据目录位置并将数据文件移动到该位置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xtrabackup &lt;span class=&quot;nt&quot;&gt;--move-back&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--target-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所由准备就绪后需要进行权限修复&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; mysql:mysql MYSQL_DATA_DIR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后在 mysql 内启动 slave 既可，slave 信息可通过从数据备份目录的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xtrabackup_binlog_info&lt;/code&gt; 中获取&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 获取备份 POS 信息&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;xxxxxx/xtrabackup_binlog_info

&lt;span class=&quot;c&quot;&gt;# 创建 slave 节点&lt;/span&gt;
CHANGE MASTER TO
    &lt;span class=&quot;nv&quot;&gt;MASTER_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'192.168.2.48'&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;MASTER_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'repl'&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;MASTER_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'xxxxxxx'&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;MASTER_LOG_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysql-bin.000005'&lt;/span&gt;,
    &lt;span class=&quot;nv&quot;&gt;MASTER_LOG_POS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;52500595&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 启动 slave&lt;/span&gt;
start slave&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
show slave status &lt;span class=&quot;se&quot;&gt;\G&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;七生产处理&quot;&gt;七、生产处理&lt;/h2&gt;

&lt;h3 id=&quot;71数据目录&quot;&gt;7.1、数据目录&lt;/h3&gt;

&lt;p&gt;目前生产环境数据目录位置调整到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/mysql&lt;/code&gt;，所以目录权限处理也要做对应调整&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/log/mysql /home/mysql_tmp
&lt;span class=&quot;nb&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; mysql:mysql /var/log/mysql /home/mysql_tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;72配置文件&quot;&gt;7.2、配置文件&lt;/h3&gt;

&lt;p&gt;生产环境目前节点配置如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;RAM: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;128G&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以配置文件也需要做相应的优化调整&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysql.cnf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[mysql]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;auto-rehash&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;default_character_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf8mb4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysqld.cnf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Percona Server template configuration
&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;[mysqld]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#
# Remove leading # and set to the amount of RAM for the most important data
# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
# innodb_buffer_pool_size = 128M
#
# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
# log_bin
#
# Remove leading # to set options mainly useful for reporting servers.
# The server defaults are faster for transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
# join_buffer_size = 128M
# sort_buffer_size = 2M
# read_rnd_buffer_size = 2M
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;datadir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/home/mysql/mysql&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/home/mysql/mysql/mysql.sock&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;pid_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/home/mysql/mysql/mysqld.pid&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 服务端编码
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;character_set_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf8mb4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 服务端排序
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;collation_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf8mb4_general_ci&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 强制使用 utf8mb4 编码集，忽略客户端设置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;skip_character_set_client_handshake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 日志输出到文件
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;FILE&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 开启常规日志输出
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;general_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 常规日志输出文件位置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;general_log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/mysql/mysqld.log&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 错误日志位置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/mysql/mysqld-error.log&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 记录慢查询
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;slow_query_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 慢查询时间(大于 1s 被视为慢查询)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;long_query_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 慢查询日志文件位置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;slow_query_log_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/log/mysql/mysqld-slow.log&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 临时文件位置
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;tmpdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/home/mysql/mysql_tmp&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The number of open tables for all threads.(refs https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_table_open_cache)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;table_open_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16384&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 文件描述符(此处修改不生效，请修改 systemd service 配置) 
# refs https://www.percona.com/blog/2017/10/12/open_files_limit-mystery/
# refs https://www.cnblogs.com/wxxjianchi/p/10370419.html
#open_files_limit=65535
# 表定义缓存(5.7 以后自动调整)
# refs https://dev.mysql.com/doc/refman/5.6/en/server-system-variables.html#sysvar_table_definition_cache
# refs http://mysql.taobao.org/monthly/2015/08/10/
#table_definition_cache=16384
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sort_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1M&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;join_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MyiSAM 引擎专用(内部临时磁盘表可能会用)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;read_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1M&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;read_rnd_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MyiSAM 引擎专用(内部临时磁盘表可能会用)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;key_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;32M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# MyiSAM 引擎专用(内部临时磁盘表可能会用)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;bulk_insert_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# myisam_sort_buffer_size 与 sort_buffer_size 区别请参考(https://stackoverflow.com/questions/7871027/myisam-sort-buffer-size-vs-sort-buffer-size)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;myisam_sort_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;64M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 内部内存临时表大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;tmp_table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;32M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 用户创建的 MEMORY 表最大大小(tmp_table_size 受此值影响)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_heap_table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;32M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 开启查询缓存
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;query_cache_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 查询缓存大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;query_cache_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;32M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sql mode
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sql_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;########### Network ###########
# 最大连接数(该参数受到最大文件描述符影响，如果不生效请检查最大文件描述符设置)
# refs https://stackoverflow.com/questions/39976756/the-max-connections-in-mysql-5-7
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_connections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1500&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mysql 堆栈内暂存的链接数量
# 当短时间内链接数量超过 max_connections 时，部分链接会存储在堆栈内，存储数量受此参数控制
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;back_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;256&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 最大链接错误，针对于 client 主机，超过此数量的链接错误将会导致 mysql server 针对此主机执行锁定(禁止链接 ERROR 1129 )
# 此错误计数仅在 mysql 链接握手失败才会计算，一般出现问题时都是网络故障
# refs https://www.cnblogs.com/kerrycode/p/8405862.html
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_connect_errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100000&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# mysql server 允许的最大数据包大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_allowed_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;64M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 交互式客户端链接超时(30分钟自动断开)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;interactive_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1800&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 非交互式链接超时时间(10分钟)
# 如果客户端有连接池，则需要协商此参数(refs https://database.51cto.com/art/201909/603519.htm)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;wait_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;28800&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 跳过外部文件系统锁定
# If you run multiple servers that use the same database directory (not recommended), 
# each server must have external locking enabled.
# refs https://dev.mysql.com/doc/refman/5.7/en/external-locking.html
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;skip_external_locking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 跳过链接的域名解析(开启此选项后 mysql 用户授权的 host 方式失效)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;skip_name_resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 禁用主机名缓存，每次都会走 DNS
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;host_cache_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;########### REPL ###########
# 开启 binlog
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log_bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-bin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 作为从库时，同步信息依然写入 binlog，方便此从库再作为其他从库的主库
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;log_slave_updates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# server id，默认为 ipv4 地址去除第一段
# eg: 192.168.2.48 =&amp;gt; 168248
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;server_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;168248&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 每 n 次事务 binlog 刷新到磁盘
# refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;sync_binlog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binlog 格式(refs https://zhuanlan.zhihu.com/p/33504555)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;binlog_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;row&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binlog 自动清理时间
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;expire_logs_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 开启 relay-log，一般作为 slave 时开启
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;relay_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-replay&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 主从复制时跳过 test 库
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;replicate_ignore_db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 每个 session binlog 缓存
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;binlog_cache_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# binlog 滚动大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max_binlog_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1024M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# GTID 相关(refs https://keithlan.github.io/2016/06/23/gtid/)
#gtid_mode=1
#enforce_gtid_consistency=1
&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;########### InnoDB ###########
# 永久表默认存储引擎
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;default_storage_engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;InnoDB&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 系统表空间数据文件大小(初始化为 1G，并且自动增长)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_data_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ibdata1:1G:autoextend&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 缓存池大小(资源充足，为所欲为)
# innodb_buffer_pool_size 必须等于 innodb_buffer_pool_chunk_size*innodb_buffer_pool_instances，或者是其整数倍
# refs https://dev.mysql.com/doc/refman/5.7/en/innodb-buffer-pool-resize.html
# refs https://zhuanlan.zhihu.com/p/60089484
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;61440M&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_instances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 默认 128M
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_chunk_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;128M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 强制恢复(refs https://www.askmaclean.com/archives/mysql-innodb-innodb_force_recovery.html)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_force_recovery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB buffer 预热(refs http://www.dbhelp.net/2017/01/12/mysql-innodb-buffer-pool-warmup.html)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_dump_at_shutdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;innodb_buffer_pool_load_at_startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 日志组中的日志文件数
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_log_files_in_group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB redo 日志大小
# refs https://www.percona.com/blog/2017/10/18/chose-mysql-innodb_log_file_size/
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_log_file_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;256MB&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 缓存还未提交的事务的缓冲区大小
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_log_buffer_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16M&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 在事务提交后的日志写入频率
# refs http://liyangliang.me/posts/2014/03/innodb_flush_log_at_trx_commit-and-sync_binlog/
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_flush_log_at_trx_commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB DML 操作行级锁等待时间
# 超时返回 ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction
# refs https://ningyu1.github.io/site/post/75-mysql-lock-wait-timeout-exceeded/
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_lock_wait_timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 行级锁超时是否回滚整个事务，默认为 OFF 仅回滚上一条语句
# 此时应用程序可以接受到错误后选择是否继续提交事务(并没有违反 ACID 原子性)
# refs https://www.cnblogs.com/hustcat/archive/2012/11/18/2775487.html
#innodb_rollback_on_timeout=ON
# InnoDB 数据写入磁盘的方式，具体见博客文章
# refs https://www.cnblogs.com/gomysql/p/3595806.html
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_flush_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;O_DIRECT&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 缓冲池脏页刷新百分比
# refs https://dbarobin.com/2015/08/29/mysql-optimization-under-ssd
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_max_dirty_pages_pct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 每秒执行的写IO量
# refs https://www.centos.bz/2016/11/mysql-performance-tuning-15-config-item/#10.INNODB_IO_CAPACITY,%20INNODB_IO_CAPACITY_MAX
# refs https://www.alibabacloud.com/blog/testing-io-performance-with-sysbench_594709
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_io_capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8000&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;innodb_io_capacity_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;16000&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 请求并发 InnoDB 线程数
# refs https://www.cnblogs.com/xinysu/p/6439715.html#_lab2_1_0
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_thread_concurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 再使用多个 InnoDB 表空间时，允许打开的最大 &quot;.ibd&quot; 文件个数，不设置默认 300，
# 并且取与 table_open_cache 相比较大的一个，此选项独立于 open_files_limit
# refs https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_open_files
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_open_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;65535&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 每个 InnoDB 表都存储在独立的表空间(.ibd)中
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_file_per_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 事务级别(可重复读，会出幻读)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;transaction_isolation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;REPEATABLE-READ&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 是否在搜索和索引扫描中使用间隙锁(gap locking)，不建议使用未来将删除
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_locks_unsafe_for_binlog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# InnoDB 后台清理线程数，更大的值有助于 DML 执行性能，&amp;gt;= 5.7.8 默认为 4
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;innodb_purge_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysqld_safe.cnf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#
# The Percona Server 5.7 configuration file.
#
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html
&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;[mysqld_safe]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;pid-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/mysqld/mysqld.pid&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;socket&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/mysqld/mysqld.sock&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;nice&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;mysqldump.cnf&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[mysqldump]&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;quick&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;default-character-set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf8mb4&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;max_allowed_packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;256M&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;八常用诊断&quot;&gt;八、常用诊断&lt;/h2&gt;

&lt;h3 id=&quot;81动态配置-diff&quot;&gt;8.1、动态配置 diff&lt;/h3&gt;

&lt;p&gt;mysql 默认允许在实例运行后使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set global VARIABLES=VALUE&lt;/code&gt; 的方式动态调整一些配置，这可能导致在运行一段时间后(运维动态修改)实例运行配置和配置文件中配置不一致；所以&lt;strong&gt;建议定期 diff 运行时配置与配置文件配置差异，防制特殊情况下 mysql 重启后运行期配置丢失&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pt-config-diff /etc/percona-server.conf.d/mysqld.cnf &lt;span class=&quot;nv&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;127.0.0.1 &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;--ask-pass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--report-width&lt;/span&gt; 100
Enter MySQL password:
2 config differences
Variable                  /etc/percona-server.conf.d/mysqld.cnf mysql47.test.com
&lt;span class=&quot;o&quot;&gt;=========================&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=====================================&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==================&lt;/span&gt;
innodb_max_dirty_pages... 50                                    50.000000
skip_name_resolve         0                                     ON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;82配置优化建议&quot;&gt;8.2、配置优化建议&lt;/h3&gt;

&lt;p&gt;Percona Toolkit 提供了一个诊断工具，用于对 mysql 内的配置进行扫描并给出优化建议，在初始化时可以使用此工具评估 mysql 当前配置的具体情况&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pt-variable-advisor 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;--ask-pass&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'^$'&lt;/span&gt;
Enter password: 

&lt;span class=&quot;c&quot;&gt;# WARN delay_key_write: MyISAM index blocks are never flushed until necessary.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# WARN innodb_flush_log_at_trx_commit-1: InnoDB is not configured in strictly ACID mode.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# NOTE innodb_max_dirty_pages_pct: The innodb_max_dirty_pages_pct is lower than the default.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# WARN max_connections: If the server ever really has more than a thousand threads running, then the system is likely to spend more time scheduling threads than really doing useful work.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# NOTE read_buffer_size-1: The read_buffer_size variable should generally be left at its default unless an expert determines it is necessary to change it.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# NOTE read_rnd_buffer_size-1: The read_rnd_buffer_size variable should generally be left at its default unless an expert determines it is necessary to change it.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# NOTE sort_buffer_size-1: The sort_buffer_size variable should generally be left at its default unless an expert determines it is necessary to change it.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# NOTE innodb_data_file_path: Auto-extending InnoDB files can consume a lot of disk space that is very difficult to reclaim later.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# WARN myisam_recover_options: myisam_recover_options should be set to some value such as BACKUP,FORCE to ensure that table corruption is noticed.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# WARN sync_binlog: Binary logging is enabled, but sync_binlog isn't configured so that every transaction is flushed to the binary log for durability.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;83死锁诊断&quot;&gt;8.3、死锁诊断&lt;/h3&gt;

&lt;p&gt;使用 pt-deadlock-logger 工具可以诊断当前的死锁状态，以下为对死锁检测的测试&lt;/p&gt;

&lt;p&gt;首先创建测试数据库和表&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;创建测试库&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DATABASE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbatest&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8mb4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COLLATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utf8mb4_unicode_ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;切换到测试库并建立测试表&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;USE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbatest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;INT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createtime&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TIMESTAMP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INNODB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在一个其他终端上开启 pt-deadlock-logger 检测&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pt-deadlock-logger 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;--ask-pass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tab&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;检测开启后进行死锁测试&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;插入两条测试数据&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'test1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'test2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;在两个终端下进行交叉事务&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;统一关闭自动提交&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;terminal_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTOCOMMIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;terminal_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AUTOCOMMIT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;交叉事务，终端&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;先更新第一条数据，终端&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;先更新第二条数据&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;terminal_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;terminal_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;terminal_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BEGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;terminal_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;此后终端&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;再尝试更新第二条数据，终端&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;再尝试更新第一条数据；造成等待互向释放锁的死锁&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;terminal_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lock2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;terminal_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lock1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;此时由于开启了&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innodb&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的死锁自动检测机制，会导致终端&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;弹出错误&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1213&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Deadlock&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trying&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;restarting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;同时&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deadlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;有日志输出&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ts&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;txn_id&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;txn_time&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;hostname&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;tbl&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;lock_type&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;lock_mode&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;wait_hold&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;victim&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;dbatest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lock2'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;2019&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;dbatest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RECORD&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'lock1'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;84查看-io-详情&quot;&gt;8.4、查看 IO 详情&lt;/h3&gt;

&lt;p&gt;不同于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostat&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pt-diskstats&lt;/code&gt; 提供了更加详细的 IO 详情统计，并且据有交互式处理，执行一下命令将会实时检测 IO 状态&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pt-diskstats &lt;span class=&quot;nt&quot;&gt;--show-timestamps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中几个关键值含义如下(更详细的请参考官方文档 &lt;a href=&quot;https://www.percona.com/doc/percona-toolkit/LATEST/pt-diskstats.html#output&quot;&gt;https://www.percona.com/doc/percona-toolkit/LATEST/pt-diskstats.html#output&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rd_s: 每秒平均读取次数。这是发送到基础设备的 IO 请求数。通常，此数量少于应用程序发出的逻辑IO请求的数量。更多请求可能已排队到块设备，但是其中一些请求通常在发送到磁盘之前先进行合并。&lt;/li&gt;
  &lt;li&gt;rd_avkb: 读取的平均大小，以千字节为单位。&lt;/li&gt;
  &lt;li&gt;rd_mb_s: 每秒读取的平均兆字节数。&lt;/li&gt;
  &lt;li&gt;rd_mrg: 在发送到物理设备之前在队列调度程序中合并在一起的读取请求的百分比。&lt;/li&gt;
  &lt;li&gt;rd_rt: 读取操作的平均响应时间(以毫秒为单位)；这是端到端响应时间，包括在队列中花费的时间。这是发出 IO 请求的应用程序看到的响应时间，而不是块设备下的物理磁盘的响应时间。&lt;/li&gt;
  &lt;li&gt;busy: 设备至少有一个请求 wall-clock 时间的比例；等同于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iostat&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;％util&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;in_prg: 正在进行的请求数。与读写并发是从可靠数字中生成的平均值不同，该数字是一个时样本，您可以看到它可能表示请求峰值，而不是真正的长期平均值。如果此数字很大，则从本质上讲意味着设备高负载运行。&lt;/li&gt;
  &lt;li&gt;ios_s: 物理设备的平均吞吐量，以每秒 IO 操作(IOPS)为单位。此列显示基础设备正在处理的总 IOPS；它是 rd_s 和 wr_s 的总和。&lt;/li&gt;
  &lt;li&gt;qtime: 平均排队时间；也就是说，请求在发送到物理设备之前在设备调度程序队列中花费的时间。&lt;/li&gt;
  &lt;li&gt;stime: 平均服务时间；也就是说，请求完成在队列中的等待之后，物理设备处理请求的时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;85重复索引优化&quot;&gt;8.5、重复索引优化&lt;/h3&gt;

&lt;p&gt;pt-duplicate-key-checker 工具提供了对数据库重复索引和外键的自动查找功能，工具使用如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pt-duplicate-key-checker 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;--ask-pass&lt;/span&gt;
Enter password:

&lt;span class=&quot;c&quot;&gt;# A software update is available:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ########################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# aaaaaa.aaaaaa_audit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ########################################################################&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# index_linkId is a duplicate of unique_linkId&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Key definitions:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   KEY `index_linkId` (`link_id`)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   UNIQUE KEY `unique_linkId` (`link_id`),&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Column types:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#         `link_id` bigint(20) not null comment 'bdid'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# To remove this duplicate index, execute:&lt;/span&gt;
ALTER TABLE &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;aaaaaa.aaaaaa_audit&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; DROP INDEX &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;index_linkId&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ########################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Summary of indexes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ########################################################################&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Size Duplicate Indexes   927420&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Total Duplicate Indexes  3&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Total Indexes            847&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;86表统计&quot;&gt;8.6、表统计&lt;/h3&gt;

&lt;p&gt;pt-find 是一个很方便的表查找统计工具，默认的一些选项可以实现批量查找符合条件的表，甚至执行一些 SQL 处理命令&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 批量查找大于 5G 的表，并排序&lt;/span&gt;
pt-find &lt;span class=&quot;nt&quot;&gt;--host&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;--ask-pass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tablesize&lt;/span&gt; +5G | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rn&lt;/span&gt;
Enter password: 

&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rss_service&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_feed_news&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;db_log_history&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_mobile_click_201912&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;db_log_history&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_mobile_click_201911&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;db_log_history&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_mobile_click_201910&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_user_messages&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_user_link_history&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_mobile_click&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_message&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_link_votes&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_links_mobile_content&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_links&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_comment_votes&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_comments&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果想要定制输出可以采用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--printf&lt;/code&gt; 选项&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pt-find &lt;span class=&quot;nt&quot;&gt;--host&lt;/span&gt; 127.0.0.1 &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;--ask-pass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tablesize&lt;/span&gt; +5G &lt;span class=&quot;nt&quot;&gt;--printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%T&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%D.%N&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rn&lt;/span&gt;
Enter password: 

13918404608     &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_links_mobile_content&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
13735231488     &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_comment_votes&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
12633227264     &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_user_messages&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
12610174976     &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_user_link_history&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
10506305536     &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_links&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
9686745088      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_message&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
9603907584      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;rss_service&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_feed_news&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
9004122112      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;db_log_history&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_mobile_click_201910&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
8919007232      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_comments&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
8045707264      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;db_log_history&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_mobile_click_201912&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
7855915008      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;db_log_history&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_mobile_click_201911&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
6099566592      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_mobile_click&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
5892898816      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_dix&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;test_link_votes&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;遗憾的是目前 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf&lt;/code&gt; 格式来源与 Perl 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sprintf&lt;/code&gt; 函数，所以支持格式有限，不过简单的格式定制已经基本实现，复杂的建议通过 awk 处理&lt;/strong&gt;；其他的可选参数具体参考官方文档 &lt;a href=&quot;https://www.percona.com/doc/percona-toolkit/LATEST/pt-find.html&quot;&gt;https://www.percona.com/doc/percona-toolkit/LATEST/pt-find.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;87其他命令&quot;&gt;8.7、其他命令&lt;/h3&gt;

&lt;p&gt;迫于篇幅，其他更多的高级命令请自行查阅官方文档 &lt;a href=&quot;https://www.percona.com/doc/percona-toolkit/LATEST/index.html&quot;&gt;https://www.percona.com/doc/percona-toolkit/LATEST/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jan 2020 20:41:22 +0800</pubDate>
        <link>https://mritd.me/2020/01/21/set-up-percona-server/</link>
        <guid isPermaLink="true">https://mritd.me/2020/01/21/set-up-percona-server/</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>如何编写一个 CoreDNS 插件</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;目前测试环境中有很多个 DNS 服务器，不同项目组使用的 DNS 服务器不同，但是不可避免的他们会访问一些公共域名；老的 DNS 服务器都是 dnsmasq，改起来很麻烦，最近研究了一下 CoreDNS，通过编写插件的方式可以实现让多个 CoreDNS 实例实现分布式的统一控制，以下记录了插件编写过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一coredns-简介&quot;&gt;一、CoreDNS 简介&lt;/h2&gt;

&lt;p&gt;CoreDNS 目前是 CNCF 旗下的项目(已毕业)，为 Kubernetes 等云原生环境提供可靠的 DNS 服务发现等功能；官网的描述只有一句话: &lt;strong&gt;CoreDNS: DNS and Service Discovery&lt;/strong&gt;，而实际上分析源码以后发现 CoreDNS 实际上是基于 Caddy (一个现代化的负载均衡器)而开发的，通过插件式注入，并监听 TCP/UDP 端口提供 DNS 服务；&lt;strong&gt;得益于 Caddy 的插件机制，CoreDNS 支持自行编写插件，拦截 DNS 请求然后处理，&lt;/strong&gt;通过这个插件机制你可以在 CoreDNS 上实现各种功能，比如构建分布式一致性的 DNS 集群、动态的 DNS 负载均衡等等&lt;/p&gt;

&lt;h2 id=&quot;二coredns-插件规范&quot;&gt;二、CoreDNS 插件规范&lt;/h2&gt;

&lt;h3 id=&quot;21插件模式&quot;&gt;2.1、插件模式&lt;/h3&gt;

&lt;p&gt;CoreDNS 插件编写目前有两种方式:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;深度耦合 CoreDNS，使用 Go 编写插件，直接编译进 CoreDNS 二进制文件&lt;/li&gt;
  &lt;li&gt;通过 GRPC 解耦，任意语言编写 GRPC 接口实现，CoreDNS 通过 GRPC 与插件交互&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于 GRPC 链接实际上借助于 CoreDNS 的 GRPC 插件，同时 GRPC 会有网络开销，TCP 链接不稳定可能造成 DNS 响应过慢等问题，所以本文只介绍如何使用 Go 编写 CoreDNS 的插件，这种插件将直接编译进 CoreDNS 二进制文件中&lt;/p&gt;

&lt;h3 id=&quot;22插件注册&quot;&gt;2.2、插件注册&lt;/h3&gt;

&lt;p&gt;在通常情况下，插件中应当包含一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setup.go&lt;/code&gt; 文件，这个文件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 方法调用插件注册，类似这样&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gdns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注册方法的第一个参数是插件名称，第二个是一个 func，func 签名如下&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// SetupFunc is used to set up a plugin, or in other words,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// execute a directive. It will be called once per key for&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// each server block it appears in.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SetupFunc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在这个 SetupFunc 中，插件编写者应当通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Controller&lt;/code&gt; 拿到 CoreDNS 的配置并解析它，从而完成自己插件的初始化配置；&lt;/strong&gt;比如你的插件需要连接 Etcd，那么在这个方法里你要通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*Controller&lt;/code&gt; 遍历配置，拿到 Etcd 的地址、证书、用户名密码配置等信息；&lt;/p&gt;

&lt;p&gt;如果配置信息没有问题，该插件应当初始化完成；如果有问题就报错退出，然后整个 CoreDNS 启动失败；如果插件初始化完成，最后不要忘记将自己的插件加入到整个插件链路中(CoreDNS 根据情况逐个调用)&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caddy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etcdParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gdns&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;dnsserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;23插件结构体&quot;&gt;2.3、插件结构体&lt;/h3&gt;

&lt;p&gt;一般来说，每一个插件都会定义一个结构体，&lt;strong&gt;结构体中包含必要的 CoreDNS 内置属性，以及当前插件特性的相关配置；&lt;/strong&gt;一个样例的插件结构体如下所示&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GDNS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;// Next 属性在 Setup 之后会被设置到下一个插件的引用，以便在本插件解析失败后可以交由下面的插件继续解析&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// Fall 列表用来控制哪些域名的请求解析失败后可以继续穿透到下一个插件重新处理&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Fall&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;fall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// Zones 表示当前插件应该 case 哪些域名的 DNS 请求&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Zones&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
	
	&lt;span class=&quot;c&quot;&gt;// PathPrefix 和 Client 就是插件本身的业务属性了，由于插件要连 Etcd&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// PathPrefix 就是 Etcd 目录前缀，Client 是一个 Etcd 的 client&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// endpoints 是 Etcd api 端点的地址&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;PathPrefix&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etcdcv3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;endpoints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// Stored here as well, to aid in testing.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;24插件接口&quot;&gt;2.4、插件接口&lt;/h3&gt;

&lt;p&gt;一个 Go 编写的 CoreDNS 插件实际上只需要实现一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handler&lt;/code&gt; 接口既可，接口定义如下&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Handler is like dns.Handler except ServeDNS may return an rcode&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// and/or error.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// If ServeDNS writes to the response body, it should return a status&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// code. CoreDNS assumes *no* reply has yet been written if the status&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// code is one of the following:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// * SERVFAIL (dns.RcodeServerFailure)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// * REFUSED (dns.RecodeRefused)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// * FORMERR (dns.RcodeFormatError)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// * NOTIMP (dns.RcodeNotImplemented)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// All other response codes signal other handlers above it that the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// response message is already written, and that they should not write&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// to it also.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// If ServeDNS encounters an error, it should return the error value&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// so it can be logged by designated error-handling plugin.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// If writing a response after calling another ServeDNS method, the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// returned rcode SHOULD be used when writing the response.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// If handling errors after calling another ServeDNS method, the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// returned error value SHOULD be logged or handled accordingly.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// Otherwise, return values should be propagated down the plugin&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// chain by returning them unchanged.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ServeDNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServeDNS&lt;/code&gt; 方法是插件需要实现的主要逻辑方法，DNS 请求接受后会从这个方法传入，插件编写者需要实现查询并返回结果&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Name&lt;/code&gt; 方法只返回一个插件名称标识，具体作用记不太清楚，好像是为了判断插件命名唯一性然后做链式顺序调用的，原则只要你不跟系统插件重名就行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;基本逻辑就是在 setup 阶段通过配置文件创建你的插件结构体对象；然后插件结构体实现这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Handler&lt;/code&gt; 接口，运行期 CoreDNS 会调用接口的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ServeDNS&lt;/code&gt; 方法来向插件查询 DNS 请求&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;25servedns-方法&quot;&gt;2.5、ServeDNS 方法&lt;/h3&gt;

&lt;p&gt;ServeDNS 方法入参有 3 个:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;context.Context&lt;/code&gt; 用来控制超时等情况的 context&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dns.ResponseWriter&lt;/code&gt; 插件通过这个对象写入对 Client DNS 请求的响应结果&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*dns.Msg&lt;/code&gt; 这个是 Client 发起的 DNS 请求，插件负责处理它，比如当你发现请求类型是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AAAA&lt;/code&gt; 而你的插件又不想去支持时要如何返回结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于返回结果，插件编写者应当通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dns.ResponseWriter.WriteMsg&lt;/code&gt; 方法写入返回结果，基本代码如下&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// ServeDNS implements the plugin.Handler interface.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gDNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServeDNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;c&quot;&gt;// ...... 这里应当实现你的业务逻辑，查找相应的 DNS 记录&lt;/span&gt;
	
	&lt;span class=&quot;c&quot;&gt;// 最后通过 new 一个 dns.Msg 作为返回结果&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetReply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authoritative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
	
	&lt;span class=&quot;c&quot;&gt;// records 是真正的记录结果，应当在业务逻辑区准备好&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
	&lt;span class=&quot;c&quot;&gt;// 返回结果&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;c&quot;&gt;// 告诉 CoreDNS 是否处理成功&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RcodeSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;需要注意的是，无论根据业务逻辑是否查询到 DNS 记录，都要返回响应结果(没有就返回空)，错误或者未返回将会导致 Client 端查询 DNS 超时，然后不断重试，最终可能导致 Client 端服务故障&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;26name-方法&quot;&gt;2.6、Name 方法&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Name&lt;/code&gt; 方法非常简单，只需要返回当前插件名称既可；该方法的作用是为了其他插件判断本插件是否加载等情况&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Name implements the Handler interface.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gDNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gdns&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;三coredns-插件处理&quot;&gt;三、CoreDNS 插件处理&lt;/h2&gt;

&lt;p&gt;对于实际的业务处理，可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt; 请求 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QType&lt;/code&gt; 来做具体的业务实现&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// ServeDNS implements the plugin.Handler interface.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gDNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GDNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServeDNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gDNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NextOrFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gDNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gDNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// ...业务处理&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// A 记录查询业务逻辑&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeAAAA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// AAAA 记录查询业务逻辑&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetReply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authoritative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RcodeSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;四插件编译及测试&quot;&gt;四、插件编译及测试&lt;/h2&gt;

&lt;h3 id=&quot;41官方标准操作&quot;&gt;4.1、官方标准操作&lt;/h3&gt;

&lt;p&gt;根据官方文档的描述，当你编写好插件以后，&lt;strong&gt;你的插件应当提交到一个 Git 仓库中，可以使 Github 等(保证可以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go get&lt;/code&gt; 拉取就行)，然后修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin.cfg&lt;/code&gt;，最后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 既可&lt;/strong&gt;；具体修改如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/vey4u.png&quot; alt=&quot;plugin.cfg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;值得注意的是: 插件配置在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin.cfg&lt;/code&gt; 内的顺序决定了插件的执行顺序；通俗的讲，如果 Client 的一个 DNS 请求进来，CoreDNS 根据你在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin.cfg&lt;/code&gt; 内书写的顺序依次调用，而并非 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Corefile&lt;/code&gt; 内的配置顺序&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;配置好以后直接执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 既可编译成功一个包含自定义插件的 CoreDNS 二进制文件(编译过程的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod&lt;/code&gt; 下载加速问题不在本文讨论范围内)；你可以直接通过这个二进制测试插件的处理情况，当然这种测试不够直观，而且频繁修改由于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go mod&lt;/code&gt; 缓存等原因并不一定能保证每次编译的都包含最新插件代码，所以另一种方式请看下一章节&lt;/p&gt;

&lt;h3 id=&quot;42经验性的操作&quot;&gt;4.2、经验性的操作&lt;/h3&gt;

&lt;p&gt;根据个人测试以及对源码的分析，在修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin.cfg&lt;/code&gt; 然后执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 命令后，实际上是进行了代码生成；当你通过 git 命令查看相关修改文件时，整个插件加载体系便没什么秘密可言了；&lt;strong&gt;在整个插件体系中，插件加载是通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 方法注册的，那么既然用 go 写插件，那么应该清楚 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 方法只有在包引用之后才会执行，所以整个插件体系实际上是这样事儿的:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 以后会修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core/plugin/zplugin.go&lt;/code&gt; 文件，这个文件啥也不干，就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; 来实现调用对应包的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 方法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/ny1rz.png&quot; alt=&quot;zplugin.go&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 执行后你去追源码，实际上就是 Caddy 维护了一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map[string]Plugin&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; 会把你的插件 func 塞进去然后后面再调用，实现一个懒加载或者说延迟初始化&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/idno4.png&quot; alt=&quot;caddy_plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接着修改了一下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core/dnsserver/zdirectives.go&lt;/code&gt;，这个里面也没啥，就是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]string&lt;/code&gt;，&lt;strong&gt;但是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]string&lt;/code&gt; 这玩意有顺序啊，这就是为什么你在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin.cfg&lt;/code&gt; 里写的顺序决定了插件处理顺序的原因(因为生成的这个切片有顺序)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/bixos.png&quot; alt=&quot;zdirectives.go&quot; /&gt;&lt;/p&gt;

&lt;p&gt;综上所述，实际上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; 命令一共修改了两个文件，如果想在 IDE 内直接 debug CoreDNS + Plugin 源码，那么只需要这样做:&lt;/p&gt;

&lt;p&gt;复制自己编写的插件目录到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin&lt;/code&gt; 目录，类似这样&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/whwuy.png&quot; alt=&quot;gdns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;手动修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core/plugin/zplugin.go&lt;/code&gt;，加入自己插件的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;(此时你直接复制系统其他插件，改一下目录名既可)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/g7wp0.png&quot; alt=&quot;update_zplugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;手动修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;core/dnsserver/zdirectives.go&lt;/code&gt; 把自己插件名称写进去(自己控制顺序)，然后 debug 启动 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coredns.go&lt;/code&gt; 里面的 main 方法测试既可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.oss.link/markdown/4ucqg.png&quot; alt=&quot;coredns.go&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;五本文参考&quot;&gt;五、本文参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Writing Plugins for CoreDNS: https://coredns.io/2016/12/19/writing-plugins-for-coredns&lt;/li&gt;
  &lt;li&gt;how-to-add-plugins.md: https://github.com/coredns/coredns.io/blob/master/content/blog/how-to-add-plugins.md&lt;/li&gt;
  &lt;li&gt;example plugin: https://github.com/coredns/example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Nov 2019 20:55:53 +0800</pubDate>
        <link>https://mritd.me/2019/11/05/writing-plugin-for-coredns/</link>
        <guid isPermaLink="true">https://mritd.me/2019/11/05/writing-plugin-for-coredns/</guid>
        
        <category>Golang</category>
        
        
        <category>Golang</category>
        
      </item>
    
      <item>
        <title>Golang Etcd client example</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;准备开发点东西，需要用到 Etcd，由于生产 Etcd 全部开启了 TLS 加密，所以客户端需要相应修改，以下为 Golang 链接 Etcd 并且使用客户端证书验证的样例代码&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;api-v2&quot;&gt;API V2&lt;/h2&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;context&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/tls&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/x509&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;net&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;

	&lt;span class=&quot;s&quot;&gt;&quot;go.etcd.io/etcd/client&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// 为了保证 HTTPS 链接可信，需要预先加载目标证书签发机构的 CA 根证书&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;etcdCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/mritd/tmp/etcd_ssl/etcd-root-ca.pem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// etcd 启用了双向 TLS 认证，所以客户端证书同样需要加载&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;etcdClientCert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadX509KeyPair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/mritd/tmp/etcd_ssl/etcd.pem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/mritd/tmp/etcd_ssl/etcd-key.pem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// 创建一个空的 CA Pool&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 因为后续只会链接 Etcd 的 api 端点，所以此处选择使用空的 CA Pool，然后只加入 Etcd CA 既可&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 如果期望链接其他 TLS 端点，那么最好使用 x509.SystemCertPool() 方法先 copy 一份系统根 CA&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 然后再向这个 Pool 中添加自定义 CA&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rootCertPool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x509&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewCertPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rootCertPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppendCertsFromPEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etcdCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// Etcd HTTPS api 端点&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Endpoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://172.16.14.114:2379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// 自定义 Transport 实现自签 CA 加载以及 Client Cert 加载&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// 其他参数最好从 client.DefaultTranspor copy，以保证与默认 client 相同的行为&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyFromEnvironment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// Dial 方法已被启用，采用新的 DialContext 设置超时&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;DialContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dialer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;KeepAlive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DialContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;// 自定义 CA 及 Client Cert 配置&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TLSClientConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;RootCAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;rootCertPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;Certificates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etcdClientCert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;TLSHandshakeTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// set timeout per request to fail fast when the target endpoint is unavailable&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;HeaderTimeoutPerRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;kapi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewKeysAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// set &quot;/foo&quot; key with &quot;bar&quot; value&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Setting '/foo' key with 'bar' value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kapi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// print common key info&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set is done. Metadata is %q&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// get &quot;/foo&quot; key's value&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Getting '/foo' key value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kapi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// print common key info&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Get is done. Metadata is %q&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// print value&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%q key has %q value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;api-v3&quot;&gt;API V3&lt;/h2&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;context&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/tls&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;crypto/x509&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;log&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;

	&lt;span class=&quot;s&quot;&gt;&quot;go.etcd.io/etcd/clientv3&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// 为了保证 HTTPS 链接可信，需要预先加载目标证书签发机构的 CA 根证书&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;etcdCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/mritd/tmp/etcd_ssl/etcd-root-ca.pem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// etcd 启用了双向 TLS 认证，所以客户端证书同样需要加载&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;etcdClientCert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadX509KeyPair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Users/mritd/tmp/etcd_ssl/etcd.pem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/Users/mritd/tmp/etcd_ssl/etcd-key.pem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// 创建一个空的 CA Pool&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 因为后续只会链接 Etcd 的 api 端点，所以此处选择使用空的 CA Pool，然后只加入 Etcd CA 既可&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 如果期望链接其他 TLS 端点，那么最好使用 x509.SystemCertPool() 方法先 copy 一份系统根 CA&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// 然后再向这个 Pool 中添加自定义 CA&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rootCertPool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x509&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewCertPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;rootCertPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AppendCertsFromPEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etcdCA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;// 创建 api v3 的 client&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clientv3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientv3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// etcd https api 端点&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Endpoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://172.16.14.114:2379&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;DialTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;c&quot;&gt;// 自定义 CA 及 Client Cert 配置&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;TLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;RootCAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;rootCertPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Certificates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Certificate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etcdClientCert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;putResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sample_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sample_value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;delResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sample_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Oct 2019 10:59:03 +0800</pubDate>
        <link>https://mritd.me/2019/10/16/golang-etcd-client-example/</link>
        <guid isPermaLink="true">https://mritd.me/2019/10/16/golang-etcd-client-example/</guid>
        
        <category>Golang</category>
        
        
        <category>Golang</category>
        
      </item>
    
  </channel>
</rss>
